{"version":3,"sources":["xyz_pos_vel.csv","Objects/Sphere.js","HelperFunctions/UpdateCameraPosition.js","PlanetData.js","Objects/StarArrow.js","Objects/Star.js","HelperFunctions/ReturnColor.js","Objects/CompassObject.js","HelperFunctions/CameraControls.js","Components/Toolbar.js","Components/ToolbarWrapper.js","Objects/Selected.js","HelperFunctions/MinimapCamera.js","Components/Visualization.js","Pages/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Sphere","props","mesh","useRef","THREE","useState","hover","setHover","cameraFocused","useFrame","clock","camera","cameraMoving","newPosition","setCameraMoving","position","x","y","z","Math","round","lookAt","Vector3","UpdateCameraPosition","cameraPosition","updateProjectionMatrix","points","getPoints","setFromPoints","velocityDirection","ref","scale","size","onPointerOver","e","onPointerOut","scaleFactor","className","style","fontSize","focusDescription","name","ra","dec","distance","temperature","realColor","velMag","attach","color","_","times","i","args","sign","planetInfo","funFact","notable","realPosition","GetColor","bool","FixSpacing","numArrows","StarArrow","numOfArrows","linewidth","dashSize","gapSize","useMemo","ceil","normalizedVelMag","Star","setCameraFocused","geo","geometry","onClick","updateStarPosition","indexNum","setActive","active","starInfo","vel_is_valid","filterValues","velArrows","CompassObject","extend","OrbitControls","CameraControls","useThree","domElement","gl","controls","state","cameraMovingToHome","set","setCameraMovingToHome","current","update","setMiniMapCameraPosition","target","Toolbar","handleHomeButton","distanceValues","handleSetDistanceValues","bookmarkList","goToBookmarkedStar","removeStarFromList","handleSetFilterValues","handleSetVelMagValues","velMagValues","toggleVel","handleToggleVel","handleBookmark","handleOpenBookmark","openBookmark","modalIsOpen","setModalIsOpen","Container","Grid","Row","columns","Column","Button","Header","as","textAlign","Slider","value","onChange","valueLabelDisplay","aria-labelledby","max","Checkbox","checked","label","labelPlacement","icon","Icon","circular","verticalAlign","marginLeft","marginTop","map","index","Popup","content","trigger","isOpen","portalClassName","href","ToolbarWrapper","handleToggleLines","setOpenBookmark","prevState","Selected","rotation","MinimapCamera","copy","miniMapCameraPosition","selectedPosition","Visualization","setCameraPosition","setSelectedPosition","innerRadius","outerRadius","thetaSegments","selectedSize","setSelectedSize","setFocusDescription","setToggleLines","setDistanceValues","setVelMagValues","setFilterValues","setBookmarkList","setToggleVel","tmpCameraPosition","tmpSelectedPosition","tmpSelectedSize","brightness","realSize","far","fov","length","event","tmp","temp","splice","Main","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bd070b82.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/xyz_pos_vel.75828d90.csv\";","import React, {useRef, useState} from 'react'\nimport {Canvas, useFrame, useThree} from 'react-three-fiber'\nimport UpdateCameraPosition from \"../HelperFunctions/UpdateCameraPosition\";\nimport * as THREE from 'three'\nimport {Html} from \"drei\";\nimport _ from \"lodash\";\n\nfunction Sphere(props) {\n    // This reference will give us direct access to the mesh\n    const mesh = useRef();\n\n    // Set up state for the hovered and active state\n    // const [hovered, setHover] = useState(false);\n    const camera = new THREE.PerspectiveCamera()\n    const [hover, setHover] = useState(false);\n    const [cameraFocused, setCameraFocused] = useState(false);\n    useFrame(({clock, camera}) => {\n        if (props.cameraMoving) {\n            let tmpCameraMoving = UpdateCameraPosition(camera, props.cameraPosition, props.setCameraMoving)\n            if (tmpCameraMoving) {\n                props.setCameraMoving(false)\n\n            }\n\n        }\n\n        camera.updateProjectionMatrix()\n    })\n    // Rotate mesh every frame, this is outside of React without overhead\n    //     useFrame(() => (\n    //         mesh.current.rotation.x = mesh.current.rotation.y += 0.01\n    //     ));\n\n    const curve = new THREE.EllipseCurve(\n        200, 0,\n        props.position[0], props.position[0],\n        0, 0,\n        true,\n        0\n    );\n\n    const points = curve.getPoints(50);\n    const geometry = new THREE.BufferGeometry().setFromPoints(points);\n    const x = props.velocityDirection[0];\n    const y = props.velocityDirection[1];\n    const z = props.velocityDirection[2];\n    return (\n        <>\n            <mesh\n                {...props}\n                ref={mesh}\n                scale={props.size}\n                // onClick={() => {\n                //     props.updatePosition(props.indexNum);\n                //     props.setActive(!props.active);\n                //     setCameraFocused(true);\n                // }}\n                onPointerOver={(e) => setHover(true)}\n                onPointerOut={(e) => setHover(false)}\n            >\n                <sphereBufferGeometry/>\n                {\n                    hover ?\n                        <Html scaleFactor={3}>\n                            <div className='focusedDescription'>\n                                <p>\n                                    <strong style={{fontSize: 40}}>{props.focusDescription.name}</strong><br/><br/>\n                                    <b>Ra: </b>{props.focusDescription.ra} Deg<br/>\n                                    <b>Dec: </b>{props.focusDescription.dec} Deg <br/>\n                                    <b>Distance: </b>{props.focusDescription.distance} Light year(s)<br/>\n                                    <b>Temperature:</b> {props.focusDescription.temperature} K<br/>\n                                    <b>Color:</b> {props.focusDescription.realColor}<br/>\n                                    <b>Velocity Magnitude:</b> {props.velMag} Km/s <br/>\n                                </p>\n                            </div>\n                            {\n                                cameraFocused ?\n                                    <div className='starDescription'>\n                                        <p>\n                                            <strong style={{fontSize: 40}}>{props.name}</strong><br/><br/>\n                                            <b>Ra: </b>{props.ra} Deg<br/>\n                                            <b>Dec: </b>{props.dec} Deg <br/>\n                                            <b>Distance: </b>{props.distance} Light year(s)<br/>\n                                            <b>Temperature:</b> {props.temperature} K<br/>\n                                            <b>Color:</b> {props.realColor}<br/>\n                                            <b>Velocity Magnitude:</b> {props.velMag} Km/s <br/>\n                                        </p>\n                                    </div>\n                                    :\n                                    null\n                            }\n                        </Html>\n                        :\n                        null\n                }\n                <meshStandardMaterial attach='material' color={props.color}/>\n            </mesh>\n            <mesh\n                {...props}\n                ref={mesh}\n                scale={[.1, .1, .1]}\n            >\n                {\n                    _.times((3), i => (\n                        <arrowHelper\n                            args={[new THREE.Vector3(props.velocityDirection[0],props.velocityDirection[1],props.velocityDirection[2]), new THREE.Vector3(0, Math.sign(props.velocityDirection[1])*2, 0), (.45*i*2), \"#3AE21D\", 1, 1]}/>\n                    ))\n                }\n                {/*<arrowHelper*/}\n                {/*    args={[new THREE.Vector3(x, y, z), new THREE.Vector3(0, 0, 0), (0.45*10), 'green', 1, 1]}/>*/}\n                <meshStandardMaterial attach='material' color={'#3AE21D'}/>\n            </mesh>\n            {/*<line ref={mesh} geometry={geometry}>*/}\n            {/*    <lineBasicMaterial attach=\"material\" color={'#9c88ff'} linewidth={100}/>*/}\n            {/*</line>*/}\n        </>\n    )\n}\n\nexport default Sphere\n","import React from \"react\";\nimport {Vector3} from \"three\";\n\n/**\n * @return {boolean}\n */\n\nexport default function UpdateCameraPosition(camera, newPosition, {setCameraMoving}) {\n    if(camera.position.x < newPosition.x){\n        camera.position.x += 10\n    }\n    if(camera.position.x > newPosition.x){\n        camera.position.x -= 10;\n\n    }\n\n    if(camera.position.y < newPosition.y+1){\n        camera.position.y += 10\n    }\n    if(camera.position.y > newPosition.y){\n        camera.position.y -= 10;\n\n    }\n\n    if(camera.position.z < (newPosition.z)){\n        camera.position.z += 10\n    }\n    if(camera.position.z > newPosition.z){\n        camera.position.z -= 10;\n    }\n    if(Math.round(camera.position.x) === newPosition.x && Math.round(camera.position.y) === newPosition.y && Math.round(camera.position.z) === (newPosition.z)){\n        camera.lookAt(new Vector3(newPosition.x,newPosition.y,newPosition.z));\n\n        return true\n    }\n    return true\n    // if(camera.position.y > newPosition.y){\n    //     camera.position.y += 1\n    // } else if(camera.position.y > newPosition.y){\n    //     camera.position.y = 1\n    //     if(camera.position.y === newPosition.y){\n    //         return\n    //     }\n    // }\n    // if(camera.position.z < newPosition.z){\n    //     camera.position.z+= 1\n    // } else if(camera.position.z > newPosition.z){\n    //     camera.position.z -= 1\n    //     if(camera.position.z === newPosition.z){\n    //         return\n    //     }\n    // }\n\n\n\n}\n","// export const planetInfo = [\n//     {\n//         color: 'yellow',\n//         size: [695,695,695],\n//         position: [0,0,0],\n//         name: 'Sun',\n//         funFact: 'A very small star',\n//         notable: true,\n//         realPosition: 'X =-9.256536737968663 E+05, Y = 9.520686612116818 E+05, Z = 1.366316508862237 E+04',\n//         temperature: '5772 K',\n//         brightness: 'N/A',\n//         realSize: 'Volume: 10^12 km^3',\n//         realColor: 'Yellow'\n//     },\n//     {\n//         color: 'grey',\n//         size: [2400,2400,2400],\n//         position: [35802,31401,-867],\n//         name: 'Mercury',\n//         funFact: 'Very close to the Sun',\n//         notable: true,\n//         realPosition: 'X = 3.580275106204683 E+07, Y = 3.140185252154187 E+07, Z =-8.672649982336983 E+05',\n//         temperature: 'N/A',\n//         brightness: 'N/A',\n//         realSize: 'Volume: 6.085 x 10^12 km^3',\n//         realColor: 'Grey'\n//     },\n//     {\n//         color: 'brown',\n//         size: [6100,6100,6100],\n//         position: [-62887,88641,4792],\n//         name: 'Venus',\n//         funFact: 'fun fact about venus',\n//         notable: true,\n//         realPosition: 'X =-6.288720619614173 E+07, Y = 8.864144020726459 E+07, Z = 4.792583921857379 E+06',\n//         temperature: 'N/A',\n//         brightness: 'N/A',\n//         realSize: 'Volume: 92.843 x 10^12 km^3',\n//         realColor: 'brown'\n//     },\n//     {\n//         color: 'blue',\n//         size: [6400,6400,6400],\n//         position: [122695,83544,9.87],\n//         name: 'Earth',\n//         funFact: 'fun fact about earth',\n//         notable: true,\n//         realPosition: 'X = 1.226958517095139 E+08, Y = 8.354472940169995 E+07, Z = 9.872205695208162 E+03',\n//         temperature: 'N/A',\n//         brightness: 'N/A',\n//         realSize: 'Volume: 1.08321 x 10^12 km^3',\n//         realColor: 'Green and Blue'\n//     },\n//     {\n//         color: 'red',\n//         size: [3400,3400,3400],\n//         position: [186782,103245,-2447],\n//         name: 'Mars',\n//         funFact: 'fun fact about mars',\n//         notable: true,\n//         realPosition: 'X = 1.226958517095139 E+08, Y = 8.354472940169995 E+07, Z = 9.872205695208162 E+03',\n//         temperature: 'N/A',\n//         brightness: 'N/A',\n//         realSize: 'Volume: 16.318 x 10^10 km^3',\n//         realColor: 'Red'\n//     },\n//     {\n//         color: 'brown',\n//         size: [71500,71500,71500],\n//         position: [393020,-655622,-6073],\n//         name: 'Jupiter',\n//         funFact: 'fun fact about Jupiter',\n//         notable: true,\n//         realPosition: 'X = 3.930197566374107 E+08, Y =-6.556226784739759 E+08, Z =-6.073209030277461 E+06',\n//         temperature: 'N/A',\n//         brightness: 'N/A',\n//         realSize: 'Volume: unknown',\n//         realColor: 'brown'\n//     },\n//     {\n//         color: 'brown',\n//         size: [60300,60300,60300],\n//         position: [776881,-1276386,-8735],\n//         name: 'Saturn',\n//         funFact: 'fun fact about Saturn',\n//         notable: true,\n//         realPosition: 'X = 7.768806240203553 E+08, Y =-1.276385494759369 E+09, Z =-8.735240410260737 E+06',\n//         temperature: 'N/A',\n//         brightness: 'N/A',\n//         realSize: 'Volume: unknown',\n//         realColor: 'brown'\n//     },\n//     {\n//         color: 'green',\n//         size: [25600,25600,25600],\n//         position: [2319920,1836644,-23234],\n//         name: 'Uranus',\n//         funFact: 'fun fact about Uranus',\n//         notable: true,\n//         realPosition: 'X = 2.319919930452971 E+09, Y = 1.836643611196167 E+09, Z =-2.323350049841690 E+07',\n//         temperature: 'N/A',\n//         brightness: 'N/A',\n//         realSize: 'Volume: unknown',\n//         realColor: 'Green'\n//     },\n//     {\n//         color: 'blue',\n//         size: [24800,24800,24800],\n//         position: [4400922,-812454,-8469],\n//         name: 'Neptune',\n//         funFact: 'fun fact about Neptune',\n//         notable: true,\n//         realPosition: 'X = 4.400921737819191 E+09, Y =-8.124541318852953, E+08 Z =-8.469285735092562 E+07',\n//         temperature: 'N/A',\n//         brightness: 'N/A',\n//         realSize: 'Volume: 24342 x 10 +- 30 Km',\n//         realColor: 'Blue'\n//     }\n// ];\nexport const planetInfo = [\n    {\n        color: 'yellow',\n        size: [0.1,0.1,0.1],\n        position: [0,0,0],\n        name: 'Sun',\n        ra: 271,\n        dec: 30,\n        distance: 1,\n        funFact: 'A very small star',\n        notable: true,\n        realPosition: 'X =-9.256536737968663 E+05, Y = 9.520686612116818 E+05, Z = 1.366316508862237 E+04',\n        temperature: '5772',\n        realColor: 'Yellow',\n        velocityDirection: [10,230, 5],\n        velMag: 230.271\n    },\n    // {\n    //     color: 'grey',\n    //     size: [2400,2400,2400],\n    //     position: [10000,0,0],\n    //     name: 'Mercury',\n    //     funFact: 'Very close to the Sun',\n    //     notable: true,\n    //     realPosition: 'X = 3.580275106204683 E+07, Y = 3.140185252154187 E+07, Z =-8.672649982336983 E+05',\n    //     temperature: 'N/A',\n    //     brightness: 'N/A',\n    //     realSize: 'Volume: 6.085 x 10^12 km^3',\n    //     realColor: 'Grey'\n    // },\n    // {\n    //     color: 'brown',\n    //     size: [6100,6100,6100],\n    //     position: [35000,0,0],\n    //     name: 'Venus',\n    //     funFact: 'fun fact about venus',\n    //     notable: true,\n    //     realPosition: 'X =-6.288720619614173 E+07, Y = 8.864144020726459 E+07, Z = 4.792583921857379 E+06',\n    //     temperature: 'N/A',\n    //     brightness: 'N/A',\n    //     realSize: 'Volume: 92.843 x 10^12 km^3',\n    //     realColor: 'brown'\n    // },\n    // {\n    //     color: 'blue',\n    //     size: [6400,6400,6400],\n    //     position: [70000,0,0],\n    //     name: 'Earth',\n    //     funFact: 'fun fact about earth',\n    //     notable: true,\n    //     realPosition: 'X = 1.226958517095139 E+08, Y = 8.354472940169995 E+07, Z = 9.872205695208162 E+03',\n    //     temperature: 'N/A',\n    //     brightness: 'N/A',\n    //     realSize: 'Volume: 1.08321 x 10^12 km^3',\n    //     realColor: 'Green and Blue'\n    // },\n    // {\n    //     color: 'red',\n    //     size: [3400,3400,3400],\n    //     position: [100000,0,0],\n    //     name: 'Mars',\n    //     funFact: 'fun fact about mars',\n    //     notable: true,\n    //     realPosition: 'X = 1.226958517095139 E+08, Y = 8.354472940169995 E+07, Z = 9.872205695208162 E+03',\n    //     temperature: 'N/A',\n    //     brightness: 'N/A',\n    //     realSize: 'Volume: 16.318 x 10^10 km^3',\n    //     realColor: 'Red'\n    // },\n    // {\n    //     color: 'brown',\n    //     size: [71500,71500,71500],\n    //     position: [300000,0,0],\n    //     name: 'Jupiter',\n    //     funFact: 'fun fact about Jupiter',\n    //     notable: true,\n    //     realPosition: 'X = 3.930197566374107 E+08, Y =-6.556226784739759 E+08, Z =-6.073209030277461 E+06',\n    //     temperature: 'N/A',\n    //     brightness: 'N/A',\n    //     realSize: 'Volume: unknown',\n    //     realColor: 'brown'\n    // },\n    // {\n    //     color: 'brown',\n    //     size: [60300,60300,60300],\n    //     position: [600000,0,0],\n    //     name: 'Saturn',\n    //     funFact: 'fun fact about Saturn',\n    //     notable: true,\n    //     realPosition: 'X = 7.768806240203553 E+08, Y =-1.276385494759369 E+09, Z =-8.735240410260737 E+06',\n    //     temperature: 'N/A',\n    //     brightness: 'N/A',\n    //     realSize: 'Volume: unknown',\n    //     realColor: 'brown'\n    // },\n    // {\n    //     color: 'green',\n    //     size: [25600,25600,25600],\n    //     position: [900000,0,0],\n    //     name: 'Uranus',\n    //     funFact: 'fun fact about Uranus',\n    //     notable: true,\n    //     realPosition: 'X = 2.319919930452971 E+09, Y = 1.836643611196167 E+09, Z =-2.323350049841690 E+07',\n    //     temperature: 'N/A',\n    //     brightness: 'N/A',\n    //     realSize: 'Volume: unknown',\n    //     realColor: 'Green'\n    // },\n    // {\n    //     color: 'blue',\n    //     size: [24800,24800,24800],\n    //     position: [1002000,0,0],\n    //     name: 'Neptune',\n    //     funFact: 'fun fact about Neptune',\n    //     notable: true,\n    //     realPosition: 'X = 4.400921737819191 E+09, Y =-8.124541318852953, E+08 Z =-8.469285735092562 E+07',\n    //     temperature: 'N/A',\n    //     brightness: 'N/A',\n    //     realSize: 'Volume: 24342 x 10 +- 30 Km',\n    //     realColor: 'Blue'\n    // }\n];\n","import React, {useMemo, useRef} from \"react\";\nimport * as THREE from \"three\";\nimport starInfo from \"../newStarData\";\nimport {Canvas} from \"react-three-fiber\";\nimport _ from 'lodash'\n\nfunction StarArrow(props) {\n    const mesh = useRef();\n    const material = new THREE.LineDashedMaterial({\n        color: 0xffffff,\n        linewidth: 1,\n        scale: 1,\n        dashSize: 3,\n        gapSize: 1,\n    });\n    const lineGeometry = useMemo(() => {\n        // return new THREE.BufferGeometry().setFromPoints([new THREE.Vector3(props.velocityDirection[0]/80,props.velocityDirection[1]/80,props.velocityDirection[2]/80),new THREE.Vector3(0,0,0)])\n        return new THREE.BufferGeometry().setFromPoints([new THREE.Vector3(props.velocityDirection[0], props.velocityDirection[1], props.velocityDirection[2]), new THREE.Vector3(props.position[0], props.position[1], props.position[2])])\n\n    }, [])\n    // const lineGeometry = new THREE.BufferGeometry().setFromPoints([new THREE.Vector3(props.velocityDirection[0]/80,props.velocityDirection[1]/80,props.velocityDirection[2]/80),new THREE.Vector3(0,0,0)]);\n    const points = [(1 - .9999) * props.velocityDirection[0] + .9999 * props.position[0], (1 - .9999) * props.velocityDirection[1] + .9999 * props.position[1], (1 - .9999) * props.velocityDirection[2] + .9999 * props.position[2]];\n\n    // console.log(Math.round(props.normalizedVelMag*5))\n    const numOfArrows = Math.ceil(props.normalizedVelMag*5)\n\n    return (\n        <>\n            <mesh\n                {...props}\n                ref={mesh}\n                scale={[.1,.1,.1]}\n                // onClick={()=>props.updateStarPosition(props.indexNum)}\n                // onPointerOver={(e) => setHover(true)}\n                // onPointerOut={(e) => setHover(false)}\n            >\n            {/*<line ref={mesh} geometry={lineGeometry}>*/}\n            {/*    <lineBasicMaterial attach=\"material\" color={'green'} linewidth={5}/>*/}\n            {/*</line>*/}\n                {\n                    _.times((numOfArrows), i => (\n                        <arrowHelper\n                            args={[new THREE.Vector3(props.velocityDirection[0],props.velocityDirection[1],props.velocityDirection[2]), new THREE.Vector3(0, Math.sign(props.velocityDirection[1])*2, 0), (props.normalizedVelMag*i*FixSpacing(numOfArrows)), GetColor(Math.sign(props.velocityDirection[1])), 1, 1]}/>\n                    ))\n                }\n\n            {/*<meshStandardMaterial attach='material' color={props.color}/>*/}\n            </mesh>\n\n            {/*// /!*<mesh*!/*/}\n            {/*// /!*    scale={[.1, .1, .1]}*!/*/}\n            {/*// /!*    position={points}*!/*/}\n            {/*// /!*>*!/*/}\n            {/*// /!*    <boxBufferGeometry/>*!/*/}\n            {/*// /!*    /!*<arrowHelper*!/*!/*/}\n            {/*// /!*    /!*    args={[new THREE.Vector3(props.velocityDirection[0],props.velocityDirection[1],props.velocityDirection[2]), new THREE.Vector3(0,0,0), (props.normalizedVelMag*10), 'green', 1, 1]}*!/*!/*/}\n            {/*// /!*    /!*//*!/*/}\n            {/*// /!*    <lineDashedMaterial attach=\"material\" color={'green'} linewidth={40}/>*!/*/}\n            {/*//*/}\n            {/*// /!*</mesh>*!/*/}\n\n        </>\n    )\n}\n\n/**\n * @return {string}\n */\nfunction GetColor(bool){\n    if(bool === 1)\n    {\n        return \"#3AE21D\"\n    }\n    else\n    {\n        return\"#C51DE2\"\n    }\n}\n\nfunction FixSpacing(numArrows)\n{\n    if(numArrows >= 4)\n    {return 1}\n    else\n    { return 2}\n}\n\nexport default StarArrow\n","import React, {useMemo, useRef, useState} from \"react\";\nimport * as THREE from \"three\";\nimport {ReturnColor} from \"../HelperFunctions/ReturnColor\";\nimport {Html} from \"drei\";\nimport {Button, Icon} from \"semantic-ui-react\";\nimport starInfo from \"../newStarData\";\nimport StarArrow from \"./StarArrow\";\nimport {Canvas} from \"react-three-fiber\";\n\nfunction Star(props) {\n    // This reference will give us direct access to the mesh\n    const mesh = useRef();\n\n    // Set up state for the hovered and active state\n    // const [hovered, setHover] = useState(false);\n    // const [active, setActive] = useState(false);\n    // Rotate mesh every frame, this is outside of React without overhead\n    // useFrame(() => (\n    //     mesh.current.rotation.x = mesh.current.rotation.y += 0.01\n    // ))\n\n    const [hover, setHover] = useState(false);\n    const [isSelected, setIsSelected] = useState(false);\n    const [cameraFocused, setCameraFocused] = useState(false);\n    const x = props.velocityDirection[0];\n    const y = props.velocityDirection[1];\n    const z = props.velocityDirection[2];\n    const geo = useMemo(() => {\n        return new THREE.SphereBufferGeometry(1, 5, 5);\n    }, [])\n    // const geo = new THREE.SphereBufferGeometry(1, 5, 5);\n    const arrow = new THREE.ArrowHelper(0, 0, 0, 0);\n\n\n    return (\n        <>\n            <group ref={mesh}>\n                <mesh\n                    {...props}\n                    scale={hover ? [.3, .3, .3] : props.size}\n                    geometry={geo}\n                    onClick={() => {\n                        props.updateStarPosition(props.indexNum);\n                        props.setActive(!props.active);\n                        setCameraFocused(true)\n                    }}\n                    onPointerOver={(e) => setHover(true)}\n                    onPointerOut={(e) => setHover(false)}\n                >\n                    {\n                        hover ?\n                            <Html scaleFactor={3}>\n                                {/*<div className='focusedDescription'>*/}\n                                {/*    <p>*/}\n                                {/*        <strong style={{fontSize: 40}}>{props.focusDescription.name}</strong><br/><br/>*/}\n                                {/*        <b>Description:</b> {props.focusDescription.funFact}<br/>*/}\n                                {/*        <b>Ra: </b>{props.focusDescription.ra} Deg<br/>*/}\n                                {/*        <b>Dec: </b>{props.focusDescription.dec} Deg <br/>*/}\n                                {/*        <b>Distance: </b>{props.focusDescription.distance} Light year(s)<br/>*/}\n                                {/*        <b>Temperature:</b> {props.focusDescription.temperature} K<br/>*/}\n                                {/*        {*/}\n                                {/*            props.focusDescription.vel_is_valid === 'True' ?*/}\n                                {/*                <>*/}\n                                {/*                    <b>Velocity Magnitude: </b>{props.focusDescription.velMag} Km/s<br/>*/}\n                                {/*                </>*/}\n                                {/*                :*/}\n                                {/*                null*/}\n                                {/*        }*/}\n                                {/*        <b>Color:</b> {props.focusDescription.realColor}*/}\n                                {/*    </p>*/}\n                                {/*</div>*/}\n                                {/*{*/}\n                                {/*    cameraFocused ?*/}\n                                {/*        null*/}\n                                {/*        :*/}\n                                <div className='starDescription'>\n                                    <p>\n                                        <strong style={{fontSize: 40}}>{props.starInfo.name}</strong><br/><br/>\n                                        <b>Description:</b> {props.starInfo.funFact}<br/>\n                                        <b>Ra: </b>{props.starInfo.ra} Deg<br/>\n                                        <b>Dec: </b>{props.starInfo.dec} Deg <br/>\n                                        <b>Distance: </b>{props.starInfo.distance} Light year(s)<br/>\n                                        <b>Temperature:</b> {props.starInfo.temperature} K<br/>\n                                        {\n                                            props.starInfo.vel_is_valid === 'True' ?\n                                                <>\n                                                    <b>Velocity Magnitude: </b>{props.starInfo.velMag} Km/s<br/>\n                                                </>\n                                                :\n                                                null\n                                        }\n                                        <b>Color:</b> {props.starInfo.realColor}\n                                    </p>\n                                </div>\n                                {/*// }*/}\n\n                            </Html>\n                            :\n                            null\n                    }\n                    {/*<Html scaleFactor={2}>*/}\n                    {/*    <div>*/}\n                    {/*        <Button color='blue' onClick={() => {*/}\n                    {/*            props.handleBookmark(props.indexNum);*/}\n                    {/*            setIsSelected(true)*/}\n                    {/*        }} icon>*/}\n                    {/*            {*/}\n                    {/*                isSelected ?*/}\n                    {/*                    <Icon color='yellow' name='star'/>*/}\n                    {/*                    :*/}\n                    {/*                    <Icon color='yellow' name='star outline'/>*/}\n                    {/*            }*/}\n                    {/*        </Button>*/}\n                    {/*    </div>*/}\n                    {/*</Html>*/}\n                    {/*    </Html>*/}\n                    {/*    :*/}\n                    {/*    null*/}\n                }\n                {/*<Html scaleFactor={2}>*/}\n                    {/*<div>*/}\n                    {/*    <Button color='blue' onClick={() => {*/}\n                    {/*        props.handleBookmark(props.indexNum);*/}\n                    {/*        setIsSelected(true)*/}\n                    {/*    }} icon>*/}\n                    {/*        {*/}\n                    {/*            isSelected ?*/}\n                    {/*                <Icon color='yellow' name='star'/>*/}\n                    {/*                :*/}\n                    {/*                <Icon color='yellow' name='star outline'/>*/}\n                    {/*        }*/}\n                    {/*    </Button>*/}\n                    {/*</div>*/}\n                {/*</Html>*/}\n\n                    <meshStandardMaterial attach='material' color={ReturnColor(props.temperature)}/>\n                </mesh>\n                {/*{*/}\n                {/*    props.vel_is_valid === \"True\" && props.filterValues.velArrows ?*/}\n                {/*        <mesh*/}\n                {/*            {...props}*/}\n                {/*            ref={mesh}*/}\n                {/*            scale={[.1, .1, .1]}*/}\n                {/*        >*/}\n                {/*            <arrowHelper*/}\n                {/*                args={[new THREE.Vector3(x, y, z), new THREE.Vector3(0, 0, 0), (props.starInfo.normalizedVelMag*10), 'green', 1, 1]}/>*/}\n                {/*            <meshStandardMaterial attach='material' color={props.color}/>*/}\n                {/*        </mesh>*/}\n                {/*        :*/}\n                {/*        null*/}\n                {/*}*/}\n                {\n                    props.vel_is_valid === \"True\" && props.filterValues.velArrows ?\n                        <StarArrow\n                            position={props.position}\n                            velocityDirection={[x, y, z]}\n                            normalizedVelMag={props.starInfo.normalizedVelMag}\n\n                        />\n                        :\n                        null\n                }\n                {/*<StarArrow*/}\n                {/*    position={new THREE.Vector3(props.position[0],props.position[1],props.position[2])}*/}\n                {/*    velocityDirection={new THREE.Vector3(0,0,0)}*/}\n                {/*/>*/}\n            </group>\n        </>\n    )\n}\n\nexport default Star\n","/**\n * @return {string}\n */\nexport function ReturnColor(temperature){\n    if(temperature < 3700){\n        return '#F12F26'\n    }\n    if(temperature >= 3700 && temperature < 5200){\n        return '#F77526'\n    }\n    if(temperature >= 5200 && temperature < 6000){\n        return '#FAFF52'\n    }\n    if(temperature >= 6000 && temperature < 7500){\n        return '#F5FAB7'\n    }\n    if(temperature >= 7500 && temperature < 10000){\n        return '#FFFFFF'\n    }\n    if(temperature >= 10000 && temperature < 33000){\n        return '#C2E9FC'\n    }\n    if(temperature >= 33000){\n        return '#289DFF'\n    }\n}\n","import React, {useRef} from \"react\";\nimport {useFrame} from \"react-three-fiber\";\nimport * as THREE from \"three\";\n\nfunction CompassObject(props) {\n\n    const mesh = useRef()\n\n    // useFrame((state) => {\n    //     console.log(props.miniMapCameraPosition === null ? 1: props.miniMapCameraPosition.z)\n    //\n    // });\n\n    return (\n        <mesh\n            {...props}\n            ref={mesh}\n            // scale={[props.miniMapCameraPosition === null ? 1: props.miniMapCameraPosition.z,props.miniMapCameraPosition === null ? 1: props.miniMapCameraPosition.z,props.miniMapCameraPosition === null ? 1: props.miniMapCameraPosition.z]}\n            scale={[1,1,1]}\n        >\n            {/*<boxBufferGeometry attach='geometry'/>*/}\n            <arrowHelper\n                args={[new THREE.Vector3(0,1,0), new THREE.Vector3(0,0,0), 3, \"blue\", 1, .5]}/>\n            <arrowHelper\n                args={[new THREE.Vector3(1,0,0), new THREE.Vector3(0,0,0), 3, \"red\", 1, .5]}/>\n            <arrowHelper\n                args={[new THREE.Vector3(0,0,1), new THREE.Vector3(0,0,0), 3, \"green\", 1, .5]}/>\n        </mesh>\n    )\n}\n\nexport default CompassObject\n","import React, {useRef} from \"react\";\nimport {extend, useFrame, useThree} from \"react-three-fiber\";\nimport {OrbitControls} from \"three/examples/jsm/controls/OrbitControls\";\nimport * as THREE from 'three'\nimport UpdateCameraPosition from \"./UpdateCameraPosition\";\nextend({OrbitControls});\n\n\nconst CameraControls = (props) => {\n    // Get a reference to the Three.js Camera, and the canvas html element.\n    // We need these to setup the OrbitControls component.\n    // https://threejs.org/docs/#examples/en/controls/OrbitControls\n    const {\n        camera,\n        gl: {domElement},\n    } = useThree();\n\n    const mesh=useRef()\n    // Ref to the controls, so that we can update them on every frame using useFrame\n    const controls = useRef();\n    useFrame((state) => {\n        if(props.cameraMovingToHome){\n            camera.position.set(0,0,7)\n            props.setCameraMovingToHome(false)\n        }\n        if(props.cameraMovingToHome){\n            camera.position.set(props.cameraPosition.x,props.cameraPosition.y,props.cameraPosition.z+7)\n            props.setCameraMovingToHome(false);\n        }\n        controls.current.update();\n        camera.updateProjectionMatrix()\n        props.setMiniMapCameraPosition(camera.position);\n\n    });\n    return <orbitControls\n        target={[props.cameraPosition.x,props.cameraPosition.y,props.cameraPosition.z]}\n        ref={controls}\n        args={[camera, domElement]}\n    />;\n};\nexport default CameraControls\n","import React, {useRef, useState} from \"react\";\nimport Modal from 'react-modal';\nimport {Canvas, useFrame, useThree} from \"react-three-fiber\";\nimport _ from \"lodash\";\nimport {planetInfo} from \"../PlanetData\";\nimport Sphere from \"../Objects/Sphere\";\nimport starInfo from \"../newStarData\";\nimport Star from \"../Objects/Star\";\nimport StarArrow from \"../Objects/StarArrow\";\n// <<<<<<< HEAD\n// import {Button, Grid, Container, List, Header, Icon} from \"semantic-ui-react\";\n// =======\nimport {Button, Grid, Container, List, Header, Icon, Popup} from \"semantic-ui-react\";\n// >>>>>>> dynamic_bookmark_table\nimport InputRange from \"react-input-range\";\nimport Slider from \"@material-ui/core/Slider\";\nimport {Radio} from \"framework7-react\";\nimport {Checkbox} from \"@material-ui/core\";\nimport CompassObject from \"../Objects/CompassObject\";\nimport CameraControls from \"../HelperFunctions/CameraControls\";\nimport Visualization from \"./Visualization\";\nimport Table from '@material-ui/core/Table';\n\n\n//todo define what the wrapper will look like in here\nfunction Toolbar(\n    {\n        handleHomeButton,\n        cameraMoving,\n        setCameraMoving,\n        cameraMovingToHome,\n        setCameraMovingToHome,\n        cameraPosition,\n        distanceValues,\n        handleSetDistanceValues,\n        bookmarkList,\n        goToBookmarkedStar,\n        removeStarFromList,\n        handleSetFilterValues,\n        filterValues,\n        handleSetVelMagValues,\n        velMagValues,\n        toggleVel,\n        handleToggleVel,\n        handleBookmark,\n        handleOpenBookmark,\n        openBookmark\n    }\n) {\n\n\n    // Ref to the controls, so that we can update them on every frame using useFrame\n    const [modalIsOpen, setModalIsOpen] = useState(true)\n    return (\n        <>\n\n            {/*<Grid centered={true}>*/}\n            {/*    <Grid.Row columns={3}>*/}\n            {/*        <Grid.Column>*/}\n            {/*            <Message color='blue'>*/}\n            {/*                <p>*/}\n            {/*                    <strong style={{fontSize: 40}}>{focusDescription.name}</strong><br/><br/>*/}\n            {/*                    <b>Description:</b> {focusDescription.funFact}<br/>*/}\n            {/*                    <b>Ra: </b>{focusDescription.ra} Deg<br/>*/}\n            {/*                    <b>Dec: </b>{focusDescription.dec} Deg <br/>*/}\n            {/*                    <b>Distance: </b>{focusDescription.distance} Light years<br/>*/}\n            {/*                    <b>Temperature:</b> {focusDescription.temperature} K<br/>*/}\n            {/*                    <b>Brightness:</b> {focusDescription.brightness}<br/>*/}\n            {/*                    <b>Size:</b> {focusDescription.realSize}<br/>*/}\n            {/*                    <b>Color:</b> {focusDescription.realColor}*/}\n            {/*                </p>*/}\n\n            {/*            </Message>*/}\n            {/*        </Grid.Column>*/}\n\n            {/*        <Grid.Column>*/}\n            {/*            <div className='starsList'>*/}\n\n            {/*<List divided verticalAlign='middle'>*/}\n            {/*    <List.Item>*/}\n            {/*        <List.Content floated='right'>*/}\n            {/*            <Button onClick={handleHomeButton}>Go</Button>*/}\n            {/*        </List.Content>*/}\n            {/*        <List.Content>*/}\n            {/*            Sun*/}\n            {/*        </List.Content>*/}\n            {/*    </List.Item>*/}\n            {/*    {*/}\n            {/*        starInfo.map((value, index) => {*/}\n            {/*            return (*/}\n\n            {/*                value.notable ?*/}\n            {/*                    value.parallax >= parallaxLimit ?*/}\n            {/*                        <List.Item>*/}\n            {/*                            <List.Content floated='right'>*/}\n            {/*                                <Button*/}\n            {/*                                    onClick={() => updateStarPosition(index)}>Go</Button>*/}\n            {/*                            </List.Content>*/}\n            {/*                            <List.Content>*/}\n            {/*                                {value.name}*/}\n            {/*                            </List.Content>*/}\n            {/*                        </List.Item>*/}\n            {/*                        :*/}\n            {/*                        null*/}\n            {/*                    :*/}\n            {/*                    null*/}\n            {/*            )*/}\n            {/*        })*/}\n            {/*    }*/}\n            {/*</List>*/}\n            {/*            </div>*/}\n\n            {/*        </Grid.Column>*/}\n\n            {/*        <Grid.Column>*/}\n            {/*            <Button onClick={handleToggleLines}>Toggle Star Lines</Button>*/}\n\n\n            <div className='toolBar'>\n\n                <Container>\n\n                    <Grid>\n                        .\n                        <Grid.Row columns={7}>\n\n                            <Grid.Column>\n\n                                <Button color='yellow' style={{color: 'black'}} onClick={handleHomeButton}>Back to\n                                    Sun</Button>\n                            </Grid.Column>\n                            <Grid.Column>\n                                <Header as='h5' textAlign='center'>Camera is looking at\n                                    position<br/> {'<'}{cameraPosition.x}, {cameraPosition.y}, {cameraPosition.z}{'>'}\n                                </Header>\n                            </Grid.Column>\n                            <Grid.Column>\n                                <p style={{textAlign: 'center'}}>\n                                    Distance<br/> {filterValues.distance[0]} to {filterValues.distance[1]}\n                                </p>\n                                <Slider\n                                    value={distanceValues}\n                                    onChange={handleSetDistanceValues}\n                                    valueLabelDisplay=\"auto\"\n                                    aria-labelledby=\"range-slider\"\n                                    max={3216}\n                                />\n                            </Grid.Column>\n                            <Grid.Column>\n                                <p style={{textAlign: 'center'}}>\n                                    Velocity\n                                    Magnitude<br/> {filterValues.velMag[0]} to {filterValues.velMag[1]}\n                                </p>\n                                <Slider\n                                    value={velMagValues}\n                                    onChange={handleSetVelMagValues}\n                                    valueLabelDisplay=\"auto\"\n                                    aria-labelledby=\"range-slider\"\n                                    max={9821}\n                                />\n                            </Grid.Column>\n                            <Grid.Column>\n                                <Checkbox\n                                    checked={toggleVel}\n                                    label=\"Primary\"\n                                    onChange={handleToggleVel}\n                                    color='primary'\n                                    labelPlacement=\"start\"\n                                />\n                                Velocity Arrows\n                            </Grid.Column>\n\n                            <Grid.Column>\n                                <Button onClick={handleSetFilterValues}>Filter</Button>\n                            </Grid.Column>\n                            <Grid.Column>\n                                <Button onClick={handleBookmark} color='blue' icon>Bookmark <Icon color='yellow'\n                                                                                                  name='star'/></Button>\n                                <Button size='tiny'  circular icon onClick={() => setModalIsOpen(true)}>?</Button>\n\n                            </Grid.Column>\n\n\n                        </Grid.Row>\n\n\n                    </Grid>\n\n                </Container>\n\n            </div>\n            {/*        </Grid.Column>*/}\n            {/*    </Grid.Row>*/}\n\n            {/*</Grid>*/}\n            <div className='bookmarkList'>\n                {/*<Header inverted as='h1'>*/}\n                {/*    Bookmarked Stars:*/}\n                {/*</Header>*/}\n                {/*<List divided verticalAlign='middle'>*/}\n                {/*    {*/}\n                {/*        bookmarkList.map((value, index) => {*/}\n                {/*            return (*/}\n                {/*                <List.Item>*/}\n                {/*                    <List.Content floated='right'>*/}\n                {/*                        <Button*/}\n                {/*                            // onClick={() => goToBookmarkedStar(index)}>Go*/}\n                {/*                            onClick={() => removeStarFromList(index)}>Remove*/}\n                {/*                        </Button>*/}\n                {/*                    </List.Content>*/}\n                {/*                    <List.Content>{value.name}</List.Content>*/}\n                {/*                    <List.Content>{value.distance}</List.Content>*/}\n                {/*                    <List.Content>{value.temperature}</List.Content>*/}\n                {/*                    <List.Content>{value.velMag}</List.Content>*/}\n                {/*                </List.Item>*/}\n\n                {/*            )*/}\n                {/*        })*/}\n                {/*    }*/}\n                {/*</List>*/}\n                {/*<Table celled verticalAlign='middle'>*/}\n                {/*  <Table.Header>*/}\n                {/*    <Table.Row>*/}\n                {/*      <Table.HeaderCell>Star Name</Table.HeaderCell>*/}\n                {/*      <Table.HeaderCell>Distance</Table.HeaderCell>*/}\n                {/*      <Table.HeaderCell>Temperature</Table.HeaderCell>*/}\n                {/*      <Table.HeaderCell>Velocity Magnitude</Table.HeaderCell>*/}\n                {/*      <Table.HeaderCell>Remove Star</Table.HeaderCell>*/}\n                {/*    </Table.Row>*/}\n                {/*  </Table.Header>*/}\n\n                {/*  <Table.Body>*/}\n                {/*    {*/}\n                {/*      bookmarkList.map((value, index) => {*/}\n                {/*        return (*/}\n                {/*            <Table.Row>*/}\n                {/*              <Table.Cell>{value.name}</Table.Cell>*/}\n                {/*              <Table.Cell>{value.distance}</Table.Cell>*/}\n                {/*              <Table.Cell>{value.temperature}</Table.Cell>*/}\n                {/*              <Table.Cell>{value.velMag}</Table.Cell>*/}\n                {/*              <Table.Cell selectable onClick={() => removeStarFromList(index)}>*/}\n                {/*                Remove*/}\n                {/*              </Table.Cell>*/}\n                {/*            </Table.Row>*/}\n\n                {/*        )*/}\n                {/*      })*/}\n                {/*    }*/}\n                {/*  </Table.Body>*/}\n\n                {/*</Table>*/}\n                <div className='tableStyle'>\n                    <Grid verticalAlign='middle'>\n                        <Grid.Row as='h3' columns={2}>\n                            <Button style={{marginLeft: 10, marginTop: 5}}  onClick={handleOpenBookmark} icon size='tiny'>\n                                {\n                                    openBookmark ?\n                                        <Icon name='arrow up'/>\n:\n                                        <Icon name='arrow down'/>\n\n                                }\n\n                            </Button>\n                            <Grid.Column textAlign='middle'>\n                                    Bookmarked Stars\n                            </Grid.Column>\n\n\n\n                        </Grid.Row>\n                        <Grid.Row>\n\n                        </Grid.Row>\n                        {\n                            openBookmark ?\n                                <>\n                                    {/*<Button style={{marginLeft: 20}} onClick={handleOpenBookmark} icon size='tiny'>*/}\n                                    {/*    <Icon name='arrow up'/>*/}\n\n                                    {/*</Button>*/}\n                                    <Grid.Row columns={5}>\n                                        <Grid.Column>Star Name (Hover)</Grid.Column>\n                                        <Grid.Column>Distance (ly)</Grid.Column>\n                                        <Grid.Column>Temperature (K)</Grid.Column>\n                                        <Grid.Column>Velocity Magnitude (Km/s)</Grid.Column>\n                                        <Grid.Column>Remove Star</Grid.Column>\n                                    </Grid.Row>\n                                    {\n                                        bookmarkList.map((value, index) => {\n                                            return (\n                                                <Grid.Row columns={5}>\n                                                    <Grid.Column><Popup content={value.name}\n                                                                        trigger={<h5 onClick={()=>goToBookmarkedStar(index)}>Star</h5>}/></Grid.Column>\n                                                    <Grid.Column>{value.distance}</Grid.Column>\n                                                    <Grid.Column>{value.temperature}</Grid.Column>\n                                                    <Grid.Column>{value.vel_is_valid === \"True\" ? value.velMag : \"None\"}</Grid.Column>\n                                                    <Grid.Column>\n                                                        <Button icon color=\"red\" circular\n                                                                onClick={() => removeStarFromList(index)}>\n                                                            <Icon name=\"x\"/>\n                                                        </Button>\n                                                    </Grid.Column>\n                                                </Grid.Row>\n\n                                            )\n                                        })\n                                    }\n                                </>\n                                :\n                                null\n                        }\n\n                    </Grid>\n                </div>\n            </div>\n            <div className='legend'>\n                <div className=\"grid-item\">Star Color</div>\n                <div className=\"grid-item-r\">Red</div>\n                <div className=\"grid-item-o\">Orange</div>\n                <div className=\"grid-item-y\">Yellow</div>\n                <div className=\"grid-item-yw\">Yellow White</div>\n                <div className=\"grid-item-w\">White</div>\n                <div className=\"grid-item-bw\">Blue White</div>\n                <div className=\"grid-item-b\">Blue</div>\n                <div className=\"grid-item\">Surface Temp</div>\n                <div className=\"grid-item\"> &lt; 3,700 K</div>\n                <div className=\"grid-item\">3,700-5,200 K</div>\n                <div className=\"grid-item\">5,200-6,000 K</div>\n                <div className=\"grid-item\">6,000-7,500 K</div>\n                <div className=\"grid-item\">7,500-10,000K</div>\n                <div className=\"grid-item\">10,000-30,000K</div>\n                <div className=\"grid-item\">&gt; 33,000K</div>\n            </div>\n\n\n            <div className='legend-2'>\n                <div className=\"grid-item\"># of Arrows</div>\n                <div className=\"grid-item\">Velocity</div>\n                <div className=\"grid-item\"><Icon name='arrow up' color='black'/></div>\n                <div className=\"grid-item\">0-100km/s</div>\n                <div className=\"grid-item\"><Icon name='arrow up' color='black'/><Icon name='arrow up' color='black'/>\n                </div>\n                <div className=\"grid-item\">100-200km/s</div>\n                <div className=\"grid-item\"><Icon name='arrow up' color='black'/><Icon name='arrow up'\n                                                                                      color='black'/><Icon\n                    name='arrow up' color='black'/></div>\n                <div className=\"grid-item\">200-300km/s</div>\n                <div className=\"grid-item\"><Icon name='arrow up' color='black'/><Icon name='arrow up'\n                                                                                      color='black'/><Icon\n                    name='arrow up' color='black'/><Icon name='arrow up' color='black'/></div>\n                <div className=\"grid-item\">300-400km/s</div>\n                <div className=\"grid-item\"><Icon name='arrow up' color='black'/><Icon name='arrow up'\n                                                                                      color='black'/><Icon\n                    name='arrow up' color='black'/><Icon name='arrow up' color='black'/><Icon name='arrow up'\n                                                                                              color='black'/></div>\n                <div className=\"grid-item\">&gt;400km/s</div>\n                <div className=\"grid-item\"><Icon name='arrow up' color='green'/></div>\n                <div className=\"grid-item\">Positive Y velocity</div>\n                <div className=\"grid-item\"><Icon name='arrow down' color='purple'/></div>\n                <div className=\"grid-item\">Negative Y velocity</div>\n            </div>\n\n            <div>\n                <Modal isOpen={modalIsOpen} portalClassName={modalIsOpen ? \"modal\": null}>\n                    <button className=\"mini basic red circular ui icon button\" onClick={() => setModalIsOpen(false)}>\n                        <i className=\"x icon\"/>\n                    </button>\n                    <h1 className=\"modalHeader\">\n                        A 3D-Visualization of Stellar Bodies in the Milky Way\n                    </h1>\n                    <p className=\"modalText\">\n                        This visualization is an interactive 3-dimensional application to\n                        view and understand the relative positions and motions of stars within our local vicinity of the\n                        Milky Way galaxy.<br/>\n                        Data provided by The Global Astrometric Interferometer for Astrophysics, GAIA: a European space\n                        mission providing\n                        astronomy, photometry,\n                        and spectroscopy of more than 1000 million stars in the Milky Way (1% of\n                        total stars in galaxy).<br/>\n                        Raw data pulled from the second GAIA data release (2018)\n                        Transformed into cartesian galactocentric values using Astro.py python packages\n                    </p>\n                    <h3 className=\"modalHeader\">\n                        How to use the visualization\n                    </h3>\n                    <p className=\"modalText\">\n                        <b>Focus:</b><br/> Left click on a star to move the camera's position to that star.<br/>\n                        The camera will now be focused the star's position. (The default focused star is the Earth’s\n                        sun).\n                    </p>\n                    <p className=\"modalText\">\n                        <b>Pan:</b><br/> Click and hold the right mouse button to pan the camera through space.\n                    </p>\n                    <p className=\"modalText\">\n                        <b>Rotation:</b><br/> Click and hold the left mouse button to change the camera's position around the\n                        focused star.\n                    </p>\n                    <p className=\"modalText\">\n                        <b>Zoom:</b><br/> Scrolling the mouse wheel towards you will zoom the camera out and scrolling the mouse\n                        wheel forward will zoom the camera in.\n                    </p>\n                    <p className=\"modalText\">\n                        <b>Filter:</b><br/> Use the options labeled “Distance” and “Velocity Magnitude” to filter the stars<br/> based on\n                        the selected min and max values.<br/>\n                        Use the “”Velocity Arrow” checkbox to turn the star vectors on/off.<br/>\n                        When you are ready to filter\n                        the stars, click on the button labeled “Filter”.\n                    </p>\n                    <p className=\"modalText\">\n                        <b>Bookmark:</b><br/> Click on the star you want to bookmark.<br/>\n                        Then use\n                        the blue button labeled \"Bookmark\" in the toolbar\n                        to bookmark it.<br/>\n                        The star’s description will appear on the left of the window.<br/>\n                        You may use this table to compare star data and clicking on the star name will move the\n                        camera to the bookmarked star’s position.\n                        Using the Red X button will remove the star from the bookmarked list.\n\n                    </p>\n                    <p className=\"modalText\">\n                        You may return to the default view of the Earth's sun by clicking on the button labeled \"Back to\n                        sun\" and reopen this window by clicking\n                        the button labeled \"?.\"\n                    </p>\n                    <h3 className=\"modalHeader\">\n                        Credit\n                    </h3>\n                    <h3 className=\"modalCredit\">\n                        Created by: <a  href='https://tabalbar.github.io/' target=\"_blank\">Roderick Tabalba</a>, <a href='http://www2.hawaii.edu/~jeff2012/' target=\"_blank\">Jeff Kleyner</a>, <a href='https://github.com/wongk711' target=\"_blank\">Kameron Wong</a>, <a href='https://chris-nishimura.github.io/' target=\"_blank\">Christopher Nishimura</a>\n                    </h3>\n                </Modal>\n            </div>\n\n\n        </>\n    )\n}\n\nexport default Toolbar\n","import React, {useState} from \"react\";\nimport Toolbar from \"./Toolbar\";\n\n//todo This will hold all the functionality of the toolbar, see example below\nfunction ToolbarWrapper(\n    {\n        handleHomeButton,\n        focusDescription,\n        updateStarPosition,\n        handleToggleLines,\n        cameraPosition,\n        handleSetDistanceValues,\n        distanceValues,\n        bookmarkList,\n        goToBookmarkedStar,\n        handleSetFilterValues,\n        filterValues,\n        handleSetVelMagValues,\n        removeStarFromList,\n        velMagValues,\n        toggleVel,\n        handleToggleVel,\n        cameraMoving,\n        setCameraMoving,\n        cameraMovingToHome,\n        setCameraMovingToHome,\n        handleBookmark\n    }\n)\n{\n\n        const [openBookmark, setOpenBookmark] = useState(false);\n\n        const handleOpenBookmark = () => {\n                setOpenBookmark(prevState => !prevState)\n        }\n\n        return (\n        <>\n            <Toolbar\n                handleHomeButton={handleHomeButton}\n                focusDescription={focusDescription}\n                updateStarPosition={updateStarPosition}\n                handleToggleLines={handleToggleLines}\n                cameraPosition={cameraPosition}\n                distanceValues={distanceValues}\n                handleSetDistanceValues={handleSetDistanceValues}\n                bookmarkList={bookmarkList}\n                goToBookmarkedStar={goToBookmarkedStar}\n                handleSetFilterValues={handleSetFilterValues}\n                filterValues={filterValues}\n                handleSetVelMagValues={handleSetVelMagValues}\n                velMagValues={velMagValues}\n                toggleVel={toggleVel}\n                handleToggleVel={handleToggleVel}\n                cameraMoving={cameraMoving}\n                setCameraMoving={setCameraMoving}\n                cameraMovingToHome={cameraMovingToHome}\n                setCameraMovingToHome={setCameraMovingToHome}\n                handleBookmark={handleBookmark}\n                removeStarFromList={removeStarFromList}\n                openBookmark={openBookmark}\n                handleOpenBookmark={handleOpenBookmark}\n            />\n        </>\n    )\n}\n\nexport default ToolbarWrapper\n","import React, {useRef, useEffect, useState} from \"react\";\nimport * as THREE from \"three\";\nimport {useFrame} from \"react-three-fiber\";\nimport {Tube} from \"drei\";\n\nfunction Selected(props){\n\n\n    const mesh = useRef();\n\n    // Rotate mesh every frame, this is outside of React without overhead\n    useFrame(() => (\n        mesh.current.rotation.y = mesh.current.rotation.y += .2\n    ));\n\n    return (\n        <>\n            <mesh\n                {...props}\n                ref={mesh}\n                scale={props.size}\n                // onPointerOver={(e) => setHover(true)}\n                // onPointerOut={(e) => setHover(false)}\n            >\n\n\n                <ringBufferGeometry/>\n                <meshStandardMaterial attach='material' color='#986967'/>\n            </mesh>\n            {/*<Tube*/}\n            {/*    args={[1,1]} // Width, Height and Depth of the box*/}\n            {/*    {...props} // All THREE.Mesh props are valid*/}\n            {/*>*/}\n            {/*    <meshPhongMaterial attach=\"material\" color=\"#f3f3f3\" wireframe />*/}\n            {/*</Tube>*/}\n            {/*<line ref={mesh} geometry={coneGeometry}>*/}\n            {/*    <lineBasicMaterial attach=\"material\" color={'#9c88ff'} linewidth={100}/>*/}\n            {/*</line>*/}\n        </>\n    )\n}\n\nexport default Selected\n","import React, {useRef} from \"react\";\nimport {extend, useFrame, useThree} from \"react-three-fiber\";\nimport {OrbitControls} from \"three/examples/jsm/controls/OrbitControls\";\nimport * as THREE from 'three'\nimport UpdateCameraPosition from \"./UpdateCameraPosition\";\nextend({OrbitControls});\n\n\nconst MinimapCamera = (props) => {\n    // Get a reference to the Three.js Camera, and the canvas html element.\n    // We need these to setup the OrbitControls component.\n    // https://threejs.org/docs/#examples/en/controls/OrbitControls\n    const {\n        camera,\n        gl: {domElement},\n    } = useThree();\n\n    const mesh=useRef()\n    // Ref to the controls, so that we can update them on every frame using useFrame\n    const controls = useRef();\n    useFrame((state) => {\n        // if(props.cameraMovingToHome){\n        //     camera.position.set(0,0,2)\n        //     props.setCameraMovingToHome(false)\n        // }\n        // if(props.cameraMovingToHome){\n        //     camera.position.set(props.cameraPosition.x,props.cameraPosition.y,props.cameraPosition.z+2)\n        //     props.setCameraMovingToHome(false);\n        // }\n        controls.current.update();\n        camera.updateProjectionMatrix()\n        // console.log(props.cameraPosition)\n        camera.position.copy(props.miniMapCameraPosition)\n        camera.lookAt(props.selectedPosition.x,props.selectedPosition.y,props.selectedPosition.z)\n    });\n    return <orbitControls\n        target={[props.selectedPosition.x,props.selectedPosition.y,props.selectedPosition.z]}\n        ref={controls}\n        args={[camera, domElement]}\n    />;\n};\nexport default MinimapCamera\n","import React, {useState, useRef} from \"react\";\nimport {Canvas, extend, useFrame, useThree} from \"react-three-fiber\";\nimport _ from \"lodash\";\nimport Sphere from \"../Objects/Sphere\";\nimport ToolbarWrapper from \"./ToolbarWrapper\";\nimport {planetInfo} from '../PlanetData'\nimport starInfo from '../newStarData'\nimport {Stats, Stars} from \"drei\";\nimport {OrbitControls} from \"three/examples/jsm/controls/OrbitControls\";\nimport CameraControls from \"../HelperFunctions/CameraControls\";\nimport Star from \"../Objects/Star\";\nimport StarArrow from \"../Objects/StarArrow\";\nimport Selected from \"../Objects/Selected\";\nimport Pin from \"../Objects/Pin\";\nimport * as THREE from \"three\";\nimport Toolbar from \"./Toolbar\";\nimport CompassObject from \"../Objects/CompassObject\";\nimport MinimapCamera from \"../HelperFunctions/MinimapCamera\";\n\n\nfunction Visualization(\n    {}\n) {\n\n    const [cameraPosition, setCameraPosition] = useState({x: 0, y: 0, z: 0});\n    const [cameraMoving, setCameraMoving] = useState(false);\n    const [active, setActive] = useState(false);\n    const [cameraMovingToHome, setCameraMovingToHome] = useState(false);\n    const [selectedPosition ,setSelectedPosition] = useState({x: 0, y: 0, z:0})\n    const [selectedSize, setSelectedSize] = useState({innerRadius: planetInfo[0].size[0]*3, outerRadius: planetInfo[0].size[1]*3, thetaSegments: planetInfo[0].size[2]})\n    const [focusDescription, setFocusDescription] = useState({\n        name: 'Sun',\n        funFact: 'A very small star',\n        notable: true,\n        realPosition: 'X =-9.256536737968663 E+05, Y = 9.520686612116818 E+05, Z = 1.366316508862237 E+04',\n        temperature: '5772',\n        ra: planetInfo[0].ra,\n        dec: planetInfo[0].dec,\n        distance: planetInfo[0].distance,\n        velocityDirection: [10,230, 5],\n        vel_is_valid: \"True\",\n        velMag: 230.271,\n        realColor: 'Yellow'\n    });\n    const [toggleLines, setToggleLines] = useState(true);\n    const [distanceValues, setDistanceValues] = useState([0,500]);\n    const [velMagValues, setVelMagValues] = useState([0,9821]);\n    const [filterValues, setFilterValues] = useState({\n\n        distance: [0,500],\n        velMag: [0,9821],\n        velArrows: true\n    })\n    const [bookmarkList, setBookmarkList] = useState([]);\n    const [toggleVel, setToggleVel] = useState(true);\n    const [cameraAxisView, setCameraAxisView] = useState()\n    const [miniMapCameraPosition, setMiniMapCameraPosition] = useState(null);\n\n    const removeStarFromList = (index) => {\n      let temp = bookmarkList;\n        temp.splice(index, 1);\n      setBookmarkList([...temp])\n    }\n\n    const handleHomeButton = () => {\n        const tmpCameraPosition = {\n            x: 0,\n            y: 0,\n            z: 0\n        };\n        const tmpSelectedPosition = {\n            x: planetInfo[0].position[0],\n            y: planetInfo[0].position[1],\n            z: planetInfo[0].position[2]\n        };\n        const tmpSelectedSize = {\n            innerRadius: planetInfo[0].size[0]*3,\n            outerRadius: planetInfo[0].size[1]*3,\n            thetaSegments: planetInfo[0].size[2]\n        };\n\n        setSelectedSize(tmpSelectedSize)\n        setSelectedPosition(tmpSelectedPosition)\n        setFocusDescription({\n            name: 'Sun',\n            funFact: 'A very small star',\n            notable: true,\n            realPosition: 'X =-9.256536737968663 E+05, Y = 9.520686612116818 E+05, Z = 1.366316508862237 E+04',\n            temperature: '5772',\n            ra: planetInfo[0].ra,\n            dec: planetInfo[0].dec,\n            position: planetInfo[0].position,\n            distance: planetInfo[0].distance,\n            velocityDirection: [10,230, 5],\n            velMag: 230.271,\n            size: [0.1,0.1,0.1],\n            vel_is_valid: \"True\",\n            realColor: 'Yellow'\n        });\n        setCameraPosition(tmpCameraPosition);\n        setToggleLines(true)\n        setCameraMovingToHome(true)\n    };\n\n    const updateStarPosition = (indexNum) => {\n        const tmpCameraPosition = {\n            x: starInfo[indexNum].position[0],\n            y: starInfo[indexNum].position[1],\n            z: starInfo[indexNum].position[2]\n        };\n        const tmpSelectedPosition = {\n            x: starInfo[indexNum].position[0],\n            y: starInfo[indexNum].position[1],\n            z: starInfo[indexNum].position[2]\n        };\n        const tmpSelectedSize = {\n            innerRadius: starInfo[indexNum].size[0]*3,\n            outerRadius: starInfo[indexNum].size[1]*3,\n            thetaSegments: starInfo[indexNum].size[2]\n        };\n        setSelectedSize(tmpSelectedSize)\n\n        setSelectedPosition(tmpSelectedPosition)\n        setCameraPosition(tmpCameraPosition);\n        setCameraMoving(true)\n        setCameraMovingToHome(true)\n        setToggleLines(false)\n        setFocusDescription({\n            name: starInfo[indexNum].name,\n            funFact: starInfo[indexNum].funFact,\n            notable: starInfo[indexNum].notable,\n            ra: starInfo[indexNum].ra,\n            dec: starInfo[indexNum].dec,\n            size: [0.1,0.1,0.1],\n            position: starInfo[indexNum].position,\n            distance: starInfo[indexNum].distance,\n            realPosition: starInfo[indexNum].realPosition,\n            temperature: starInfo[indexNum].temperature,\n            brightness: starInfo[indexNum].brightness,\n            realSize: starInfo[indexNum].realSize,\n            realColor: starInfo[indexNum].realColor,\n            vel_is_valid: starInfo[indexNum].vel_is_valid,\n            velMag: starInfo[indexNum].velMag\n\n        })\n    };\n\n    const goToBookmarkedStar = (indexNum) => {\n        const tmpCameraPosition = {\n            x: bookmarkList[indexNum].position[0],\n            y: bookmarkList[indexNum].position[1],\n            z: bookmarkList[indexNum].position[2]\n        };\n        const tmpSelectedPosition = {\n            x: bookmarkList[indexNum].position[0],\n            y: bookmarkList[indexNum].position[1],\n            z: bookmarkList[indexNum].position[2]\n        };\n        const tmpSelectedSize = {\n            innerRadius: bookmarkList[indexNum].size[0]*3,\n            outerRadius: bookmarkList[indexNum].size[1]*3,\n            thetaSegments: bookmarkList[indexNum].size[2]\n        };\n        setSelectedSize(tmpSelectedSize)\n\n        setSelectedPosition(tmpSelectedPosition)\n        setCameraPosition(tmpCameraPosition);\n        setCameraMoving(true)\n        setCameraMovingToHome(true)\n        setToggleLines(false)\n        setFocusDescription({\n            name: bookmarkList[indexNum].name,\n            funFact: bookmarkList[indexNum].funFact,\n            notable: bookmarkList[indexNum].notable,\n            ra: bookmarkList[indexNum].ra,\n            dec: bookmarkList[indexNum].dec,\n            size: [0.1,0.1,0.1],\n            distance: bookmarkList[indexNum].distance,\n            position: bookmarkList[indexNum].position,\n            realPosition: bookmarkList[indexNum].realPosition,\n            temperature: bookmarkList[indexNum].temperature,\n            brightness: bookmarkList[indexNum].brightness,\n            realSize: bookmarkList[indexNum].realSize,\n            realColor: bookmarkList[indexNum].realColor,\n            vel_is_valid: bookmarkList[indexNum].vel_is_valid === \"True\" ? true : false,\n            velMag: bookmarkList[indexNum].velMag\n\n        })\n    };\n\n    const handleSetFilterValues = (event) => {\n        let tmp = {\n            distance: [distanceValues[0], distanceValues[1]],\n            velMag: [velMagValues[0],velMagValues[1]],\n            velArrows: toggleVel\n        }\n        setFilterValues(tmp)\n    };\n\n    const handleSetVelMagValues = (event, value) => {\n        setVelMagValues(value)\n\n    }\n\n    const handleSetDistanceValues = (event, value) => {\n        setDistanceValues(value)\n    };\n\n    const handleToggleLines = () => {\n        setToggleLines(prevState => !prevState);\n    };\n\n    const handleToggleVel = () => {\n        setToggleVel(prevState => !prevState);\n    }\n\n    const handleBookmark = () => {\n        setBookmarkList(prevState => [...prevState, focusDescription])\n    };\n\n    return (\n        <>\n            <div className='mainVisualization'>\n                <Canvas\n                    camera={{far: 10000000000, position: [0, 0, 7], fov: 50}}\n                >\n                    <ambientLight/>\n                    <pointLight position={[10, 10, 10]}/>\n                            <Sphere\n                                color={planetInfo[0].color}\n                                size={planetInfo[0].size}\n                                name={planetInfo[0].name}\n                                indexNum={0}\n                                position={planetInfo[0].position}\n                                cameraPosition={cameraPosition}\n                                cameraMoving={cameraMoving}\n                                setCameraMoving={setCameraMoving}\n                                setActive={setActive}\n                                active={active}\n                                ra={planetInfo[0].ra}\n                                dec={planetInfo[0].dec}\n                                velocityDirection={planetInfo[0].velocityDirection}\n                                velMag={planetInfo[0].velMag}\n                                temperature={planetInfo[0].temperature}\n                                distance={planetInfo[0].distance}\n                                starInfo={starInfo}\n                                focusDescription={focusDescription}\n                            />\n\n                    <Selected\n                        position={[selectedPosition.x, selectedPosition.y, selectedPosition.z]}\n                        size={[selectedSize.innerRadius, selectedSize.outerRadius, 10000]}\n                    />\n\n                    {\n                        _.times(starInfo.length, (i) => (\n                            <>\n\n                                {\n                                    starInfo[i].distance >= filterValues.distance[0] && starInfo[i].distance <= filterValues.distance[1] && starInfo[i].velMag >= filterValues.velMag[0] && starInfo[i].velMag <= filterValues.velMag[1] ?\n                                        <Star\n                                            color={starInfo[i].color}\n                                            size={[.1,.1,.1]}\n                                            indexNum={i}\n                                            position={starInfo[i].position}\n                                            updateStarPosition={updateStarPosition}\n                                            cameraPosition={cameraPosition}\n                                            cameraMoving={cameraMoving}\n                                            temperature={starInfo[i].temperature}\n                                            setCameraMoving={setCameraMoving}\n                                            velocityDirection={starInfo[i].velocityDirection}\n                                            vel_is_valid={starInfo[i].vel_is_valid}\n                                            velMag={starInfo[i].velMag}\n                                            setActive={setActive}\n                                            starInfo={starInfo[i]}\n                                            active={active}\n                                            focusDescription={focusDescription}\n                                            filterValues={filterValues}\n                                        />\n                                        :\n                                        null\n                                }\n\n\n                            </>\n                        ))\n                    }\n                    {/*{*/}\n                    {/*    toggleLines ?*/}\n                    {/*    _.times(starInfo.length, (i)=>(*/}\n                    {/*        <>*/}\n                    {/*            <Pin*/}\n                    {/*                updateStarPosition={updateStarPosition}*/}\n                    {/*                setActive={setActive}*/}\n                    {/*                active={active}*/}\n                    {/*                indexNum={i}*/}\n                    {/*                position={[(1-.01)*selectedPosition.x+.01*starInfo[i].position[0],(1-.01)*selectedPosition.y+.01*starInfo[i].position[1],(1-.01)*selectedPosition.z+.01*starInfo[i].position[2]]}*/}\n                    {/*                fromPosition={[new THREE.Vector3(starInfo[i].position[0],starInfo[i].position[1],starInfo[i].position[2]),new THREE.Vector3(selectedPosition.x,selectedPosition.y,selectedPosition.z)]}*/}\n                    {/*            />*/}\n                    {/*        </>*/}\n                    {/*    ))*/}\n                    {/*        :*/}\n                    {/*        null*/}\n                    {/*}*/}\n                    {\n                        cameraMoving ?\n                            null\n                            :\n                            <CameraControls\n                                cameraPosition={cameraPosition}\n                                cameraMoving={cameraMoving}\n                                setCameraMoving={setCameraMoving}\n                                cameraMovingToHome={cameraMovingToHome}\n                                setCameraMovingToHome={setCameraMovingToHome}\n                                setMiniMapCameraPosition={setMiniMapCameraPosition}\n                            />\n                    }\n                    <Stats\n                        className='stats'\n                    />\n                </Canvas>\n                <ToolbarWrapper\n                    handleHomeButton={handleHomeButton}\n                    focusDescription={focusDescription}\n                    updateStarPosition={updateStarPosition}\n                    handleToggleLines={handleToggleLines}\n                    cameraPosition={cameraPosition}\n                    distanceValues={distanceValues}\n                    handleSetDistanceValues={handleSetDistanceValues}\n                    bookmarkList={bookmarkList}\n                    goToBookmarkedStar={goToBookmarkedStar}\n                    handleSetFilterValues={handleSetFilterValues}\n                    filterValues={filterValues}\n                    handleSetVelMagValues={handleSetVelMagValues}\n                    velMagValues={velMagValues}\n                    toggleVel={toggleVel}\n                    handleToggleVel={handleToggleVel}\n                    cameraMoving={cameraMoving}\n                    setCameraMoving={setCameraMoving}\n                    cameraMovingToHome={cameraMovingToHome}\n                    setCameraMovingToHome={setCameraMovingToHome}\n                    handleBookmark={handleBookmark}\n                    removeStarFromList={removeStarFromList}\n                />\n                <div className='miniMap'>\n                    <Canvas\n                        camera={{far: 10000000, position: [0, 0, 3], fov: 75}}\n                    >\n                        <ambientLight/>\n                        <pointLight position={[10, 10, 10]}/>\n                        <CompassObject\n                            position={[selectedPosition.x, selectedPosition.y, selectedPosition.z]}\n                            selectedPosition={selectedPosition}\n                            miniMapCameraPosition={miniMapCameraPosition}\n                        />\n                        <MinimapCamera\n                            cameraPosition={cameraPosition}\n                            cameraMoving={cameraMoving}\n                            setCameraMoving={setCameraMoving}\n                            cameraMovingToHome={cameraMovingToHome}\n                            setCameraMovingToHome={setCameraMovingToHome}\n                            miniMapCameraPosition={miniMapCameraPosition}\n                            selectedPosition={selectedPosition}\n                        />\n                        {/*{*/}\n                        {/*    _.times(starInfo.length, (i) => (*/}\n                        {/*        <>*/}\n\n                        {/*            {*/}\n                        {/*                starInfo[i].distance >= filterValues.distance[0] && starInfo[i].distance <= filterValues.distance[1] && starInfo[i].velMag >= filterValues.velMag[0] && starInfo[i].velMag <= filterValues.velMag[1] ?*/}\n                        {/*                    <CompassObject*/}\n                        {/*                        color={starInfo[i].color}*/}\n                        {/*                        indexNum={i}*/}\n                        {/*                        position={starInfo[i].position}*/}\n                        {/*                        updateStarPosition={updateStarPosition}*/}\n                        {/*                        cameraPosition={cameraPosition}*/}\n                        {/*                        cameraMoving={cameraMoving}*/}\n\n                        {/*                    />*/}\n                        {/*                    :*/}\n                        {/*                    null*/}\n                        {/*            }*/}\n\n\n                        {/*        </>*/}\n                        {/*    ))*/}\n                        {/*}*/}\n                    </Canvas>\n                </div>\n            </div>\n        </>\n    )\n}\n\n\nexport default Visualization\n","import React from \"react\";\nimport Visualization from \"../Components/Visualization\";\nimport '../style.css'\n\nfunction Main(){\n\n    return (\n        <>\n            <Visualization/>\n        </>\n    )\n}\n\nexport default Main\n","import React from 'react';\nimport Main from \"./Pages/Main\";\nimport 'semantic-ui-css/semantic.min.css'\nimport CSVReader from \"./CSVReader\";\n\nfunction App() {\n  return (\n    <>\n        <Main/>\n        {/*<CSVReader/>*/}\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}