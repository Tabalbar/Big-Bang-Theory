{"version":3,"sources":["xyz_pos_vel.csv","Objects/Sphere.js","HelperFunctions/UpdateCameraPosition.js","PlanetData.js","Objects/StarArrow.js","Objects/Star.js","HelperFunctions/ReturnColor.js","Objects/CompassObject.js","HelperFunctions/CameraControls.js","Components/Toolbar.js","Components/ToolbarWrapper.js","Objects/Selected.js","Components/Visualization.js","Pages/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Sphere","props","mesh","useRef","THREE","useState","hover","setHover","cameraFocused","setCameraFocused","useFrame","clock","camera","cameraMoving","newPosition","setCameraMoving","position","x","y","z","Math","round","lookAt","Vector3","UpdateCameraPosition","cameraPosition","updateProjectionMatrix","points","getPoints","setFromPoints","velocityDirection","ref","scale","size","onClick","updatePosition","indexNum","setActive","active","onPointerOver","e","onPointerOut","scaleFactor","className","style","fontSize","focusDescription","name","ra","dec","distance","temperature","realColor","velMag","attach","color","_","times","i","args","sign","planetInfo","funFact","notable","realPosition","GetColor","bool","FixSpacing","numArrows","StarArrow","numOfArrows","linewidth","dashSize","gapSize","useMemo","ceil","normalizedVelMag","Star","geo","geometry","updateStarPosition","starInfo","vel_is_valid","filterValues","velArrows","CompassObject","extend","OrbitControls","CameraControls","useThree","domElement","gl","controls","state","cameraMovingToHome","set","setCameraMovingToHome","current","update","target","Toolbar","handleHomeButton","distanceValues","handleSetDistanceValues","bookmarkList","goToBookmarkedStar","handleSetFilterValues","handleSetVelMagValues","velMagValues","toggleVel","handleToggleVel","Container","Grid","Row","columns","Column","Button","Header","as","textAlign","Slider","value","onChange","valueLabelDisplay","aria-labelledby","max","Checkbox","checked","label","labelPlacement","inverted","List","divided","verticalAlign","map","index","Item","Content","floated","ToolbarWrapper","handleToggleLines","Selected","rotation","Visualization","setCameraPosition","selectedPosition","setSelectedPosition","innerRadius","outerRadius","thetaSegments","selectedSize","setSelectedSize","setFocusDescription","setToggleLines","setDistanceValues","setVelMagValues","setFilterValues","setBookmarkList","setToggleVel","console","log","tmpCameraPosition","tmpSelectedPosition","tmpSelectedSize","brightness","realSize","handleBookmark","prevState","far","fov","length","event","tmp","Main","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6808d026.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/xyz_pos_vel.75828d90.csv\";","import React, {useRef, useState} from 'react'\nimport {Canvas, useFrame, useThree} from 'react-three-fiber'\nimport UpdateCameraPosition from \"../HelperFunctions/UpdateCameraPosition\";\nimport * as THREE from 'three'\nimport {Html} from \"drei\";\nimport _ from \"lodash\";\n\nfunction Sphere(props) {\n    // This reference will give us direct access to the mesh\n    const mesh = useRef();\n\n    // Set up state for the hovered and active state\n    // const [hovered, setHover] = useState(false);\n    const camera = new THREE.PerspectiveCamera()\n    const [hover, setHover] = useState(false);\n    const [cameraFocused, setCameraFocused] = useState(false);\n    useFrame(({clock, camera}) => {\n        if (props.cameraMoving) {\n            let tmpCameraMoving = UpdateCameraPosition(camera, props.cameraPosition, props.setCameraMoving)\n            if (tmpCameraMoving) {\n                props.setCameraMoving(false)\n\n            }\n\n        }\n\n        camera.updateProjectionMatrix()\n    })\n    // Rotate mesh every frame, this is outside of React without overhead\n    //     useFrame(() => (\n    //         mesh.current.rotation.x = mesh.current.rotation.y += 0.01\n    //     ));\n\n    const curve = new THREE.EllipseCurve(\n        200, 0,\n        props.position[0], props.position[0],\n        0, 0,\n        true,\n        0\n    );\n\n    const points = curve.getPoints(50);\n    const geometry = new THREE.BufferGeometry().setFromPoints(points);\n    const x = props.velocityDirection[0];\n    const y = props.velocityDirection[1];\n    const z = props.velocityDirection[2];\n    return (\n        <>\n            <mesh\n                {...props}\n                ref={mesh}\n                scale={props.size}\n                onClick={() => {\n                    props.updatePosition(props.indexNum);\n                    props.setActive(!props.active);\n                    setCameraFocused(true);\n                }}\n                onPointerOver={(e) => setHover(true)}\n                onPointerOut={(e) => setHover(false)}\n            >\n                <sphereBufferGeometry/>\n                {\n                    hover ?\n                        <Html scaleFactor={3}>\n                            <div className='focusedDescription'>\n                                <p>\n                                    <strong style={{fontSize: 40}}>{props.focusDescription.name}</strong><br/><br/>\n                                    <b>Ra: </b>{props.focusDescription.ra} Deg<br/>\n                                    <b>Dec: </b>{props.focusDescription.dec} Deg <br/>\n                                    <b>Distance: </b>{props.focusDescription.distance} Light year(s)<br/>\n                                    <b>Temperature:</b> {props.focusDescription.temperature} K<br/>\n                                    <b>Color:</b> {props.focusDescription.realColor}<br/>\n                                    <b>Velocity Magnitude:</b> {props.velMag} Km/s <br/>\n                                </p>\n                            </div>\n                            {\n                                cameraFocused ?\n                                    <div className='starDescription'>\n                                        <p>\n                                            <strong style={{fontSize: 40}}>{props.name}</strong><br/><br/>\n                                            <b>Ra: </b>{props.ra} Deg<br/>\n                                            <b>Dec: </b>{props.dec} Deg <br/>\n                                            <b>Distance: </b>{props.distance} Light year(s)<br/>\n                                            <b>Temperature:</b> {props.temperature} K<br/>\n                                            <b>Color:</b> {props.realColor}<br/>\n                                            <b>Velocity Magnitude:</b> {props.velMag} Km/s <br/>\n                                        </p>\n                                    </div>\n                                    :\n                                    null\n                            }\n                        </Html>\n                        :\n                        null\n                }\n                <meshStandardMaterial attach='material' color={props.color}/>\n            </mesh>\n            <mesh\n                {...props}\n                ref={mesh}\n                scale={[.1, .1, .1]}\n            >\n                {\n                    _.times((3), i => (\n                        <arrowHelper\n                            args={[new THREE.Vector3(props.velocityDirection[0],props.velocityDirection[1],props.velocityDirection[2]), new THREE.Vector3(0, Math.sign(props.velocityDirection[1])*2, 0), (.45*i*2), \"green\", 1, 1]}/>\n                    ))\n                }\n                {/*<arrowHelper*/}\n                {/*    args={[new THREE.Vector3(x, y, z), new THREE.Vector3(0, 0, 0), (0.45*10), 'green', 1, 1]}/>*/}\n                <meshStandardMaterial attach='material' color={'green'}/>\n            </mesh>\n            {/*<line ref={mesh} geometry={geometry}>*/}\n            {/*    <lineBasicMaterial attach=\"material\" color={'#9c88ff'} linewidth={100}/>*/}\n            {/*</line>*/}\n        </>\n    )\n}\n\nexport default Sphere\n","import React from \"react\";\nimport {Vector3} from \"three\";\n\n/**\n * @return {boolean}\n */\n\nexport default function UpdateCameraPosition(camera, newPosition, {setCameraMoving}) {\n    if(camera.position.x < newPosition.x){\n        camera.position.x += 10\n    }\n    if(camera.position.x > newPosition.x){\n        camera.position.x -= 10;\n\n    }\n\n    if(camera.position.y < newPosition.y+1){\n        camera.position.y += 10\n    }\n    if(camera.position.y > newPosition.y){\n        camera.position.y -= 10;\n\n    }\n\n    if(camera.position.z < (newPosition.z)){\n        camera.position.z += 10\n    }\n    if(camera.position.z > newPosition.z){\n        camera.position.z -= 10;\n    }\n    if(Math.round(camera.position.x) === newPosition.x && Math.round(camera.position.y) === newPosition.y && Math.round(camera.position.z) === (newPosition.z)){\n        camera.lookAt(new Vector3(newPosition.x,newPosition.y,newPosition.z));\n\n        return true\n    }\n    return true\n    // if(camera.position.y > newPosition.y){\n    //     camera.position.y += 1\n    // } else if(camera.position.y > newPosition.y){\n    //     camera.position.y = 1\n    //     if(camera.position.y === newPosition.y){\n    //         return\n    //     }\n    // }\n    // if(camera.position.z < newPosition.z){\n    //     camera.position.z+= 1\n    // } else if(camera.position.z > newPosition.z){\n    //     camera.position.z -= 1\n    //     if(camera.position.z === newPosition.z){\n    //         return\n    //     }\n    // }\n\n\n\n}\n","// export const planetInfo = [\n//     {\n//         color: 'yellow',\n//         size: [695,695,695],\n//         position: [0,0,0],\n//         name: 'Sun',\n//         funFact: 'A very small star',\n//         notable: true,\n//         realPosition: 'X =-9.256536737968663 E+05, Y = 9.520686612116818 E+05, Z = 1.366316508862237 E+04',\n//         temperature: '5772 K',\n//         brightness: 'N/A',\n//         realSize: 'Volume: 10^12 km^3',\n//         realColor: 'Yellow'\n//     },\n//     {\n//         color: 'grey',\n//         size: [2400,2400,2400],\n//         position: [35802,31401,-867],\n//         name: 'Mercury',\n//         funFact: 'Very close to the Sun',\n//         notable: true,\n//         realPosition: 'X = 3.580275106204683 E+07, Y = 3.140185252154187 E+07, Z =-8.672649982336983 E+05',\n//         temperature: 'N/A',\n//         brightness: 'N/A',\n//         realSize: 'Volume: 6.085 x 10^12 km^3',\n//         realColor: 'Grey'\n//     },\n//     {\n//         color: 'brown',\n//         size: [6100,6100,6100],\n//         position: [-62887,88641,4792],\n//         name: 'Venus',\n//         funFact: 'fun fact about venus',\n//         notable: true,\n//         realPosition: 'X =-6.288720619614173 E+07, Y = 8.864144020726459 E+07, Z = 4.792583921857379 E+06',\n//         temperature: 'N/A',\n//         brightness: 'N/A',\n//         realSize: 'Volume: 92.843 x 10^12 km^3',\n//         realColor: 'brown'\n//     },\n//     {\n//         color: 'blue',\n//         size: [6400,6400,6400],\n//         position: [122695,83544,9.87],\n//         name: 'Earth',\n//         funFact: 'fun fact about earth',\n//         notable: true,\n//         realPosition: 'X = 1.226958517095139 E+08, Y = 8.354472940169995 E+07, Z = 9.872205695208162 E+03',\n//         temperature: 'N/A',\n//         brightness: 'N/A',\n//         realSize: 'Volume: 1.08321 x 10^12 km^3',\n//         realColor: 'Green and Blue'\n//     },\n//     {\n//         color: 'red',\n//         size: [3400,3400,3400],\n//         position: [186782,103245,-2447],\n//         name: 'Mars',\n//         funFact: 'fun fact about mars',\n//         notable: true,\n//         realPosition: 'X = 1.226958517095139 E+08, Y = 8.354472940169995 E+07, Z = 9.872205695208162 E+03',\n//         temperature: 'N/A',\n//         brightness: 'N/A',\n//         realSize: 'Volume: 16.318 x 10^10 km^3',\n//         realColor: 'Red'\n//     },\n//     {\n//         color: 'brown',\n//         size: [71500,71500,71500],\n//         position: [393020,-655622,-6073],\n//         name: 'Jupiter',\n//         funFact: 'fun fact about Jupiter',\n//         notable: true,\n//         realPosition: 'X = 3.930197566374107 E+08, Y =-6.556226784739759 E+08, Z =-6.073209030277461 E+06',\n//         temperature: 'N/A',\n//         brightness: 'N/A',\n//         realSize: 'Volume: unknown',\n//         realColor: 'brown'\n//     },\n//     {\n//         color: 'brown',\n//         size: [60300,60300,60300],\n//         position: [776881,-1276386,-8735],\n//         name: 'Saturn',\n//         funFact: 'fun fact about Saturn',\n//         notable: true,\n//         realPosition: 'X = 7.768806240203553 E+08, Y =-1.276385494759369 E+09, Z =-8.735240410260737 E+06',\n//         temperature: 'N/A',\n//         brightness: 'N/A',\n//         realSize: 'Volume: unknown',\n//         realColor: 'brown'\n//     },\n//     {\n//         color: 'green',\n//         size: [25600,25600,25600],\n//         position: [2319920,1836644,-23234],\n//         name: 'Uranus',\n//         funFact: 'fun fact about Uranus',\n//         notable: true,\n//         realPosition: 'X = 2.319919930452971 E+09, Y = 1.836643611196167 E+09, Z =-2.323350049841690 E+07',\n//         temperature: 'N/A',\n//         brightness: 'N/A',\n//         realSize: 'Volume: unknown',\n//         realColor: 'Green'\n//     },\n//     {\n//         color: 'blue',\n//         size: [24800,24800,24800],\n//         position: [4400922,-812454,-8469],\n//         name: 'Neptune',\n//         funFact: 'fun fact about Neptune',\n//         notable: true,\n//         realPosition: 'X = 4.400921737819191 E+09, Y =-8.124541318852953, E+08 Z =-8.469285735092562 E+07',\n//         temperature: 'N/A',\n//         brightness: 'N/A',\n//         realSize: 'Volume: 24342 x 10 +- 30 Km',\n//         realColor: 'Blue'\n//     }\n// ];\nexport const planetInfo = [\n    {\n        color: 'yellow',\n        size: [0.1,0.1,0.1],\n        position: [0,0,0],\n        name: 'Sun',\n        ra: 271,\n        dec: 30,\n        distance: 1,\n        funFact: 'A very small star',\n        notable: true,\n        realPosition: 'X =-9.256536737968663 E+05, Y = 9.520686612116818 E+05, Z = 1.366316508862237 E+04',\n        temperature: '5772',\n        realColor: 'Yellow',\n        velocityDirection: [10,230, 5],\n        velMag: 230.271\n    },\n    // {\n    //     color: 'grey',\n    //     size: [2400,2400,2400],\n    //     position: [10000,0,0],\n    //     name: 'Mercury',\n    //     funFact: 'Very close to the Sun',\n    //     notable: true,\n    //     realPosition: 'X = 3.580275106204683 E+07, Y = 3.140185252154187 E+07, Z =-8.672649982336983 E+05',\n    //     temperature: 'N/A',\n    //     brightness: 'N/A',\n    //     realSize: 'Volume: 6.085 x 10^12 km^3',\n    //     realColor: 'Grey'\n    // },\n    // {\n    //     color: 'brown',\n    //     size: [6100,6100,6100],\n    //     position: [35000,0,0],\n    //     name: 'Venus',\n    //     funFact: 'fun fact about venus',\n    //     notable: true,\n    //     realPosition: 'X =-6.288720619614173 E+07, Y = 8.864144020726459 E+07, Z = 4.792583921857379 E+06',\n    //     temperature: 'N/A',\n    //     brightness: 'N/A',\n    //     realSize: 'Volume: 92.843 x 10^12 km^3',\n    //     realColor: 'brown'\n    // },\n    // {\n    //     color: 'blue',\n    //     size: [6400,6400,6400],\n    //     position: [70000,0,0],\n    //     name: 'Earth',\n    //     funFact: 'fun fact about earth',\n    //     notable: true,\n    //     realPosition: 'X = 1.226958517095139 E+08, Y = 8.354472940169995 E+07, Z = 9.872205695208162 E+03',\n    //     temperature: 'N/A',\n    //     brightness: 'N/A',\n    //     realSize: 'Volume: 1.08321 x 10^12 km^3',\n    //     realColor: 'Green and Blue'\n    // },\n    // {\n    //     color: 'red',\n    //     size: [3400,3400,3400],\n    //     position: [100000,0,0],\n    //     name: 'Mars',\n    //     funFact: 'fun fact about mars',\n    //     notable: true,\n    //     realPosition: 'X = 1.226958517095139 E+08, Y = 8.354472940169995 E+07, Z = 9.872205695208162 E+03',\n    //     temperature: 'N/A',\n    //     brightness: 'N/A',\n    //     realSize: 'Volume: 16.318 x 10^10 km^3',\n    //     realColor: 'Red'\n    // },\n    // {\n    //     color: 'brown',\n    //     size: [71500,71500,71500],\n    //     position: [300000,0,0],\n    //     name: 'Jupiter',\n    //     funFact: 'fun fact about Jupiter',\n    //     notable: true,\n    //     realPosition: 'X = 3.930197566374107 E+08, Y =-6.556226784739759 E+08, Z =-6.073209030277461 E+06',\n    //     temperature: 'N/A',\n    //     brightness: 'N/A',\n    //     realSize: 'Volume: unknown',\n    //     realColor: 'brown'\n    // },\n    // {\n    //     color: 'brown',\n    //     size: [60300,60300,60300],\n    //     position: [600000,0,0],\n    //     name: 'Saturn',\n    //     funFact: 'fun fact about Saturn',\n    //     notable: true,\n    //     realPosition: 'X = 7.768806240203553 E+08, Y =-1.276385494759369 E+09, Z =-8.735240410260737 E+06',\n    //     temperature: 'N/A',\n    //     brightness: 'N/A',\n    //     realSize: 'Volume: unknown',\n    //     realColor: 'brown'\n    // },\n    // {\n    //     color: 'green',\n    //     size: [25600,25600,25600],\n    //     position: [900000,0,0],\n    //     name: 'Uranus',\n    //     funFact: 'fun fact about Uranus',\n    //     notable: true,\n    //     realPosition: 'X = 2.319919930452971 E+09, Y = 1.836643611196167 E+09, Z =-2.323350049841690 E+07',\n    //     temperature: 'N/A',\n    //     brightness: 'N/A',\n    //     realSize: 'Volume: unknown',\n    //     realColor: 'Green'\n    // },\n    // {\n    //     color: 'blue',\n    //     size: [24800,24800,24800],\n    //     position: [1002000,0,0],\n    //     name: 'Neptune',\n    //     funFact: 'fun fact about Neptune',\n    //     notable: true,\n    //     realPosition: 'X = 4.400921737819191 E+09, Y =-8.124541318852953, E+08 Z =-8.469285735092562 E+07',\n    //     temperature: 'N/A',\n    //     brightness: 'N/A',\n    //     realSize: 'Volume: 24342 x 10 +- 30 Km',\n    //     realColor: 'Blue'\n    // }\n];\n","import React, {useMemo, useRef} from \"react\";\nimport * as THREE from \"three\";\nimport starInfo from \"../newStarData\";\nimport {Canvas} from \"react-three-fiber\";\nimport _ from 'lodash'\n\nfunction StarArrow(props) {\n    const mesh = useRef();\n    const material = new THREE.LineDashedMaterial({\n        color: 0xffffff,\n        linewidth: 1,\n        scale: 1,\n        dashSize: 3,\n        gapSize: 1,\n    });\n    const lineGeometry = useMemo(() => {\n        // return new THREE.BufferGeometry().setFromPoints([new THREE.Vector3(props.velocityDirection[0]/80,props.velocityDirection[1]/80,props.velocityDirection[2]/80),new THREE.Vector3(0,0,0)])\n        return new THREE.BufferGeometry().setFromPoints([new THREE.Vector3(props.velocityDirection[0], props.velocityDirection[1], props.velocityDirection[2]), new THREE.Vector3(props.position[0], props.position[1], props.position[2])])\n\n    }, [])\n    // const lineGeometry = new THREE.BufferGeometry().setFromPoints([new THREE.Vector3(props.velocityDirection[0]/80,props.velocityDirection[1]/80,props.velocityDirection[2]/80),new THREE.Vector3(0,0,0)]);\n    const points = [(1 - .9999) * props.velocityDirection[0] + .9999 * props.position[0], (1 - .9999) * props.velocityDirection[1] + .9999 * props.position[1], (1 - .9999) * props.velocityDirection[2] + .9999 * props.position[2]];\n\n    // console.log(Math.round(props.normalizedVelMag*5))\n    const numOfArrows = Math.ceil(props.normalizedVelMag*5)\n\n    return (\n        <>\n            <mesh\n                {...props}\n                ref={mesh}\n                scale={[.1,.1,.1]}\n                // onClick={()=>props.updateStarPosition(props.indexNum)}\n                // onPointerOver={(e) => setHover(true)}\n                // onPointerOut={(e) => setHover(false)}\n            >\n            {/*<line ref={mesh} geometry={lineGeometry}>*/}\n            {/*    <lineBasicMaterial attach=\"material\" color={'green'} linewidth={5}/>*/}\n            {/*</line>*/}\n                {\n                    _.times((numOfArrows), i => (\n                        <arrowHelper\n                            args={[new THREE.Vector3(props.velocityDirection[0],props.velocityDirection[1],props.velocityDirection[2]), new THREE.Vector3(0, Math.sign(props.velocityDirection[1])*2, 0), (props.normalizedVelMag*i*FixSpacing(numOfArrows)), GetColor(Math.sign(props.velocityDirection[1])), 1, 1]}/>\n                    ))\n                }\n\n            {/*<meshStandardMaterial attach='material' color={props.color}/>*/}\n            </mesh>\n\n            {/*// /!*<mesh*!/*/}\n            {/*// /!*    scale={[.1, .1, .1]}*!/*/}\n            {/*// /!*    position={points}*!/*/}\n            {/*// /!*>*!/*/}\n            {/*// /!*    <boxBufferGeometry/>*!/*/}\n            {/*// /!*    /!*<arrowHelper*!/*!/*/}\n            {/*// /!*    /!*    args={[new THREE.Vector3(props.velocityDirection[0],props.velocityDirection[1],props.velocityDirection[2]), new THREE.Vector3(0,0,0), (props.normalizedVelMag*10), 'green', 1, 1]}*!/*!/*/}\n            {/*// /!*    /!*//*!/*/}\n            {/*// /!*    <lineDashedMaterial attach=\"material\" color={'green'} linewidth={40}/>*!/*/}\n            {/*//*/}\n            {/*// /!*</mesh>*!/*/}\n\n        </>\n    )\n}\n\n/**\n * @return {string}\n */\nfunction GetColor(bool){\n    if(bool === 1)\n    {\n        return \"green\"\n    }\n    else\n    {\n        return\"purple\"\n    }\n}\n\nfunction FixSpacing(numArrows)\n{\n    if(numArrows >= 4)\n    {return 1}\n    else\n    { return 2}\n}\n\nexport default StarArrow\n","import React, {useMemo, useRef, useState} from \"react\";\nimport * as THREE from \"three\";\nimport {ReturnColor} from \"../HelperFunctions/ReturnColor\";\nimport {Html} from \"drei\";\nimport {Button, Icon} from \"semantic-ui-react\";\nimport starInfo from \"../newStarData\";\nimport StarArrow from \"./StarArrow\";\nimport {Canvas} from \"react-three-fiber\";\n\nfunction Star(props) {\n    // This reference will give us direct access to the mesh\n    const mesh = useRef();\n\n    // Set up state for the hovered and active state\n    // const [hovered, setHover] = useState(false);\n    // const [active, setActive] = useState(false);\n    // Rotate mesh every frame, this is outside of React without overhead\n    // useFrame(() => (\n    //     mesh.current.rotation.x = mesh.current.rotation.y += 0.01\n    // ))\n\n    const [hover, setHover] = useState(false);\n    const [isSelected, setIsSelected] = useState(false);\n    const [cameraFocused, setCameraFocused] = useState(false);\n    const x = props.velocityDirection[0];\n    const y = props.velocityDirection[1];\n    const z = props.velocityDirection[2];\n    const geo = useMemo(()=>{\n        return new THREE.SphereBufferGeometry(1, 5, 5);\n    },[])\n    // const geo = new THREE.SphereBufferGeometry(1, 5, 5);\n    const arrow = new THREE.ArrowHelper(0,0,0,0 );\n\n\n    return (\n        <>\n            <group ref={mesh}>\n            <mesh\n                {...props}\n                scale={hover ? [.3, .3, .3] : props.size}\n                geometry={geo}\n                onClick={() => {\n                    props.updateStarPosition(props.indexNum);\n                    props.setActive(!props.active);\n                    setCameraFocused(true)\n                }}\n                onPointerOver={(e) => setHover(true)}\n                onPointerOut={(e) => setHover(false)}\n            >\n                {\n                    hover ?\n                        <Html scaleFactor={3}>\n                            {/*<div className='focusedDescription'>*/}\n                            {/*    <p>*/}\n                            {/*        <strong style={{fontSize: 40}}>{props.focusDescription.name}</strong><br/><br/>*/}\n                            {/*        <b>Description:</b> {props.focusDescription.funFact}<br/>*/}\n                            {/*        <b>Ra: </b>{props.focusDescription.ra} Deg<br/>*/}\n                            {/*        <b>Dec: </b>{props.focusDescription.dec} Deg <br/>*/}\n                            {/*        <b>Distance: </b>{props.focusDescription.distance} Light year(s)<br/>*/}\n                            {/*        <b>Temperature:</b> {props.focusDescription.temperature} K<br/>*/}\n                            {/*        {*/}\n                            {/*            props.focusDescription.vel_is_valid === 'True' ?*/}\n                            {/*                <>*/}\n                            {/*                    <b>Velocity Magnitude: </b>{props.focusDescription.velMag} Km/s<br/>*/}\n                            {/*                </>*/}\n                            {/*                :*/}\n                            {/*                null*/}\n                            {/*        }*/}\n                            {/*        <b>Color:</b> {props.focusDescription.realColor}*/}\n                            {/*    </p>*/}\n                            {/*</div>*/}\n                            {/*{*/}\n                            {/*    cameraFocused ?*/}\n                            {/*        null*/}\n                            {/*        :*/}\n                                    <div className='starDescription'>\n                                        <p>\n                                            <strong style={{fontSize: 40}}>{props.starInfo.name}</strong><br/><br/>\n                                            <b>Description:</b> {props.starInfo.funFact}<br/>\n                                            <b>Ra: </b>{props.starInfo.ra} Deg<br/>\n                                            <b>Dec: </b>{props.starInfo.dec} Deg <br/>\n                                            <b>Distance: </b>{props.starInfo.distance} Light year(s)<br/>\n                                            <b>Temperature:</b> {props.starInfo.temperature} K<br/>\n                                            {\n                                                props.starInfo.vel_is_valid === 'True' ?\n                                                    <>\n                                                        <b>Velocity Magnitude: </b>{props.starInfo.velMag} Km/s<br/>\n                                                    </>\n                                                    :\n                                                    null\n                                            }\n                                            <b>Color:</b> {props.starInfo.realColor}\n                                        </p>\n                                    </div>\n                            {/*// }*/}\n\n\n                        </Html>\n                        :\n                        null\n                }\n                {/*<Html scaleFactor={2}>*/}\n                {/*    <div>*/}\n                {/*        <Button color='blue' onClick={() => {*/}\n                {/*            props.handleBookmark(props.indexNum);*/}\n                {/*            setIsSelected(true)*/}\n                {/*        }} icon>*/}\n                {/*            {*/}\n                {/*                isSelected ?*/}\n                {/*                    <Icon color='yellow' name='star'/>*/}\n                {/*                    :*/}\n                {/*                    <Icon color='yellow' name='star outline'/>*/}\n                {/*            }*/}\n                {/*        </Button>*/}\n                {/*    </div>*/}\n                {/*</Html>*/}\n\n\n                <meshStandardMaterial attach='material' color={ReturnColor(props.temperature)}/>\n            </mesh>\n            {/*{*/}\n            {/*    props.vel_is_valid === \"True\" && props.filterValues.velArrows ?*/}\n            {/*        <mesh*/}\n            {/*            {...props}*/}\n            {/*            ref={mesh}*/}\n            {/*            scale={[.1, .1, .1]}*/}\n            {/*        >*/}\n            {/*            <arrowHelper*/}\n            {/*                args={[new THREE.Vector3(x, y, z), new THREE.Vector3(0, 0, 0), (props.starInfo.normalizedVelMag*10), 'green', 1, 1]}/>*/}\n            {/*            <meshStandardMaterial attach='material' color={props.color}/>*/}\n            {/*        </mesh>*/}\n            {/*        :*/}\n            {/*        null*/}\n            {/*}*/}\n                {\n                    props.vel_is_valid === \"True\" && props.filterValues.velArrows ?\n                        <StarArrow\n                            position={props.position}\n                            velocityDirection={[x,y,z]}\n                            normalizedVelMag={props.starInfo.normalizedVelMag}\n\n                        />\n                        :\n                        null\n                }\n            {/*<StarArrow*/}\n            {/*    position={new THREE.Vector3(props.position[0],props.position[1],props.position[2])}*/}\n            {/*    velocityDirection={new THREE.Vector3(0,0,0)}*/}\n            {/*/>*/}\n            </group>\n        </>\n    )\n}\n\nexport default Star\n","/**\n * @return {string}\n */\nexport function ReturnColor(temperature){\n    if(temperature < 3700){\n        return '#F12F26'\n    }\n    if(temperature >= 3700 && temperature < 5200){\n        return '#F77526'\n    }\n    if(temperature >= 5200 && temperature < 6000){\n        return '#FAFF52'\n    }\n    if(temperature >= 6000 && temperature < 7500){\n        return '#F5FAB7'\n    }\n    if(temperature >= 7500 && temperature < 10000){\n        return '#FFFFFF'\n    }\n    if(temperature >= 10000 && temperature < 33000){\n        return '#C2E9FC'\n    }\n    if(temperature >= 33000){\n        return '#289DFF'\n    }\n}\n","import React, {useRef} from \"react\";\nimport {useFrame} from \"react-three-fiber\";\n\nfunction CompassObject(props) {\n\n    const mesh = useRef()\n\n    useFrame(() => (\n        mesh.current.position.x += props.cameraPosition.x)\n    )\n\n\n    return (\n        <mesh\n            {...props}\n            ref={mesh}\n\n        >\n            <boxBufferGeometry attach='geometry' args={[1, 1, 1]}/>\n        </mesh>\n    )\n}\n\nexport default CompassObject\n","import React, {useRef} from \"react\";\nimport {extend, useFrame, useThree} from \"react-three-fiber\";\nimport {OrbitControls} from \"three/examples/jsm/controls/OrbitControls\";\nimport * as THREE from 'three'\nimport UpdateCameraPosition from \"./UpdateCameraPosition\";\nextend({OrbitControls});\n\n\nconst CameraControls = (props) => {\n    // Get a reference to the Three.js Camera, and the canvas html element.\n    // We need these to setup the OrbitControls component.\n    // https://threejs.org/docs/#examples/en/controls/OrbitControls\n    const {\n        camera,\n        gl: {domElement},\n    } = useThree();\n\n    const mesh=useRef()\n    // Ref to the controls, so that we can update them on every frame using useFrame\n    const controls = useRef();\n    useFrame((state) => {\n        if(props.cameraMovingToHome){\n            camera.position.set(0,0,2)\n            props.setCameraMovingToHome(false)\n        }\n        if(props.cameraMovingToHome){\n            camera.position.set(props.cameraPosition.x,props.cameraPosition.y,props.cameraPosition.z+2)\n            props.setCameraMovingToHome(false);\n        }\n        controls.current.update();\n        camera.updateProjectionMatrix()\n\n    });\n    return <orbitControls\n        target={[props.cameraPosition.x,props.cameraPosition.y,props.cameraPosition.z]}\n        ref={controls}\n        args={[camera, domElement]}\n    />;\n};\nexport default CameraControls\n","import React, {useRef} from \"react\";\nimport {Canvas, useFrame, useThree} from \"react-three-fiber\";\nimport _ from \"lodash\";\nimport {planetInfo} from \"../PlanetData\";\nimport Sphere from \"../Objects/Sphere\";\nimport starInfo from \"../newStarData\";\nimport Star from \"../Objects/Star\";\nimport StarArrow from \"../Objects/StarArrow\";\nimport {Button, Grid, Container, List, Header, Label} from \"semantic-ui-react\";\nimport InputRange from \"react-input-range\";\nimport Slider from \"@material-ui/core/Slider\";\nimport {Radio} from \"framework7-react\";\nimport {Checkbox} from \"@material-ui/core\";\nimport CompassObject from \"../Objects/CompassObject\";\nimport CameraControls from \"../HelperFunctions/CameraControls\";\nimport Visualization from \"./Visualization\";\n\n\n//todo define what the wrapper will look like in here\nfunction Toolbar(\n    {\n        handleHomeButton,\n        cameraMoving,\n        setCameraMoving,\n        cameraMovingToHome,\n        setCameraMovingToHome,\n        cameraPosition,\n        distanceValues,\n        handleSetDistanceValues,\n        bookmarkList,\n        goToBookmarkedStar,\n        handleSetFilterValues,\n        filterValues,\n        handleSetVelMagValues,\n        velMagValues,\n        toggleVel,\n        handleToggleVel\n    }\n) {\n\n\n    // Ref to the controls, so that we can update them on every frame using useFrame\n\n    return (\n        <>\n            {/*<Grid centered={true}>*/}\n            {/*    <Grid.Row columns={3}>*/}\n            {/*        <Grid.Column>*/}\n            {/*            <Message color='blue'>*/}\n            {/*                <p>*/}\n            {/*                    <strong style={{fontSize: 40}}>{focusDescription.name}</strong><br/><br/>*/}\n            {/*                    <b>Description:</b> {focusDescription.funFact}<br/>*/}\n            {/*                    <b>Ra: </b>{focusDescription.ra} Deg<br/>*/}\n            {/*                    <b>Dec: </b>{focusDescription.dec} Deg <br/>*/}\n            {/*                    <b>Distance: </b>{focusDescription.distance} Light years<br/>*/}\n            {/*                    <b>Temperature:</b> {focusDescription.temperature} K<br/>*/}\n            {/*                    <b>Brightness:</b> {focusDescription.brightness}<br/>*/}\n            {/*                    <b>Size:</b> {focusDescription.realSize}<br/>*/}\n            {/*                    <b>Color:</b> {focusDescription.realColor}*/}\n            {/*                </p>*/}\n\n            {/*            </Message>*/}\n            {/*        </Grid.Column>*/}\n\n            {/*        <Grid.Column>*/}\n            {/*            <div className='starsList'>*/}\n\n            {/*<List divided verticalAlign='middle'>*/}\n            {/*    <List.Item>*/}\n            {/*        <List.Content floated='right'>*/}\n            {/*            <Button onClick={handleHomeButton}>Go</Button>*/}\n            {/*        </List.Content>*/}\n            {/*        <List.Content>*/}\n            {/*            Sun*/}\n            {/*        </List.Content>*/}\n            {/*    </List.Item>*/}\n            {/*    {*/}\n            {/*        starInfo.map((value, index) => {*/}\n            {/*            return (*/}\n\n            {/*                value.notable ?*/}\n            {/*                    value.parallax >= parallaxLimit ?*/}\n            {/*                        <List.Item>*/}\n            {/*                            <List.Content floated='right'>*/}\n            {/*                                <Button*/}\n            {/*                                    onClick={() => updateStarPosition(index)}>Go</Button>*/}\n            {/*                            </List.Content>*/}\n            {/*                            <List.Content>*/}\n            {/*                                {value.name}*/}\n            {/*                            </List.Content>*/}\n            {/*                        </List.Item>*/}\n            {/*                        :*/}\n            {/*                        null*/}\n            {/*                    :*/}\n            {/*                    null*/}\n            {/*            )*/}\n            {/*        })*/}\n            {/*    }*/}\n            {/*</List>*/}\n            {/*            </div>*/}\n\n            {/*        </Grid.Column>*/}\n\n            {/*        <Grid.Column>*/}\n            {/*            <Button onClick={handleToggleLines}>Toggle Star Lines</Button>*/}\n\n\n            <div className='toolBar'>\n                <Container>\n                    <Grid>\n                        .\n                        <Grid.Row columns={6}>\n                            <Grid.Column>\n                                <Button color='yellow' style={{color: 'black'}} onClick={handleHomeButton}>Back to\n                                    Sun</Button>\n                            </Grid.Column>\n                            <Grid.Column>\n                                <Header as='h5' textAlign='center'>Camera is looking at\n                                    position<br/> {'<'}{cameraPosition.x}, {cameraPosition.y}, {cameraPosition.z}{'>'}\n                                </Header>\n                            </Grid.Column>\n                            <Grid.Column>\n\n                                <p style={{textAlign: 'center'}}>\n                                    Distance<br/> {filterValues.distance[0]} to {filterValues.distance[1]}\n                                </p>\n                                <Slider\n                                    value={distanceValues}\n                                    onChange={handleSetDistanceValues}\n                                    valueLabelDisplay=\"auto\"\n                                    aria-labelledby=\"range-slider\"\n                                    max={3216}\n                                />\n                            </Grid.Column>\n                            <Grid.Column>\n                                <p style={{textAlign: 'center'}}>\n                                    Velocity\n                                    Magnitude<br/> {filterValues.velMag[0]} to {filterValues.velMag[1]}\n                                </p>\n                                <Slider\n                                    value={velMagValues}\n                                    onChange={handleSetVelMagValues}\n                                    valueLabelDisplay=\"auto\"\n                                    aria-labelledby=\"range-slider\"\n                                    max={9821}\n                                />\n                            </Grid.Column>\n                            <Grid.Column>\n                                <Checkbox\n                                    checked={toggleVel}\n                                    label=\"Primary\"\n                                    onChange={handleToggleVel}\n                                    color='primary'\n                                    labelPlacement=\"start\"\n                                />\n                                Velocity Arrows\n                            </Grid.Column>\n\n                            <Grid.Column>\n                                <Button onClick={handleSetFilterValues}>Filter</Button>\n                            </Grid.Column>\n\n                        </Grid.Row>\n\n\n                    </Grid>\n                </Container>\n            </div>\n            {/*        </Grid.Column>*/}\n            {/*    </Grid.Row>*/}\n\n            {/*</Grid>*/}\n            <div className='bookmarkList'>\n                <Header inverted as='h1'>\n                    Bookmarked Stars:\n                </Header>\n                <List divided verticalAlign='middle'>\n                    {\n                        bookmarkList.map((value, index) => {\n                            return (\n                                <List.Item>\n                                    <List.Content floated='right'>\n                                        <Button\n                                            onClick={() => goToBookmarkedStar(index)}>Go</Button>\n                                    </List.Content>\n                                    <List.Content>\n                                        {value.name}\n                                    </List.Content>\n                                </List.Item>\n\n                            )\n                        })\n                    }\n                </List></div>\n            <div className='legend'>\n                <div className=\"grid-item\">Star Color</div>\n                <div className=\"grid-item-r\">Red</div>\n                <div className=\"grid-item-o\">Orange</div>\n                <div className=\"grid-item-y\">Yellow</div>\n                <div className=\"grid-item-yw\">Yellow White</div>\n                <div className=\"grid-item-w\">White</div>\n                <div className=\"grid-item-bw\">Blue White</div>\n                <div className=\"grid-item-b\">Blue</div>\n                <div className=\"grid-item\">Surface Temp</div>\n                <div className=\"grid-item\">less than 3,700 K</div>\n                <div className=\"grid-item\">3,700-5,200 K</div>\n                <div className=\"grid-item\">5,200-6,000 K</div>\n                <div className=\"grid-item\">6,000-7,500 K</div>\n                <div className=\"grid-item\">7,500-10,000K</div>\n                <div className=\"grid-item\">10,000-30,000K</div>\n                <div className=\"grid-item\">greater than 33,000K</div>\n            </div>\n\n\n            {/*<div className='miniMap'>*/}\n            {/*    <Canvas*/}\n            {/*        camera={{far: 10000000, position: [0, 0, 3], fov: 75}}*/}\n            {/*    >*/}\n            {/*        <ambientLight/>*/}\n            {/*        <pointLight position={[10, 10, 10]}/>*/}\n            {/*        <CompassObject*/}\n            {/*        cameraPosition={cameraPosition}*/}\n            {/*        />*/}\n            {/*        <CameraControls*/}\n            {/*            cameraPosition={cameraPosition}*/}\n            {/*            cameraMoving={cameraMoving}*/}\n            {/*            setCameraMoving={setCameraMoving}*/}\n            {/*            cameraMovingToHome={cameraMovingToHome}*/}\n            {/*            setCameraMovingToHome={setCameraMovingToHome}*/}\n            {/*        />*/}\n\n            {/*    </Canvas>*/}\n            {/*</div>*/}\n        </>\n    )\n}\n\nexport default Toolbar\n","import React from \"react\";\nimport Toolbar from \"./Toolbar\";\n\n//todo This will hold all the functionality of the toolbar, see example below\nfunction ToolbarWrapper(\n    {\n        handleHomeButton,\n        focusDescription,\n        updateStarPosition,\n        handleToggleLines,\n        cameraPosition,\n        handleSetDistanceValues,\n        distanceValues,\n        bookmarkList,\n        goToBookmarkedStar,\n        handleSetFilterValues,\n        filterValues,\n        handleSetVelMagValues,\n        velMagValues,\n        toggleVel,\n        handleToggleVel,\n        cameraMoving,\n        setCameraMoving,\n        cameraMovingToHome,\n        setCameraMovingToHome,\n    }\n){\n\n\n\n    return (\n        <>\n            <Toolbar\n                handleHomeButton={handleHomeButton}\n                focusDescription={focusDescription}\n                updateStarPosition={updateStarPosition}\n                handleToggleLines={handleToggleLines}\n                cameraPosition={cameraPosition}\n                distanceValues={distanceValues}\n                handleSetDistanceValues={handleSetDistanceValues}\n                bookmarkList={bookmarkList}\n                goToBookmarkedStar={goToBookmarkedStar}\n                handleSetFilterValues={handleSetFilterValues}\n                filterValues={filterValues}\n                handleSetVelMagValues={handleSetVelMagValues}\n                velMagValues={velMagValues}\n                toggleVel={toggleVel}\n                handleToggleVel={handleToggleVel}\n                cameraMoving={cameraMoving}\n            setCameraMoving={setCameraMoving}\n            cameraMovingToHome={cameraMovingToHome}\n            setCameraMovingToHome={setCameraMovingToHome}\n            />\n        </>\n    )\n}\n\nexport default ToolbarWrapper\n","import React, {useRef, useEffect, useState} from \"react\";\nimport * as THREE from \"three\";\nimport {useFrame} from \"react-three-fiber\";\nimport {Tube} from \"drei\";\n\nfunction Selected(props){\n\n\n    const mesh = useRef();\n\n    // Rotate mesh every frame, this is outside of React without overhead\n    useFrame(() => (\n        mesh.current.rotation.y = mesh.current.rotation.y += .2\n    ));\n\n    return (\n        <>\n            <mesh\n                {...props}\n                ref={mesh}\n                scale={props.size}\n                // onPointerOver={(e) => setHover(true)}\n                // onPointerOut={(e) => setHover(false)}\n            >\n\n\n                <ringBufferGeometry/>\n                <meshStandardMaterial attach='material' color='#986967'/>\n            </mesh>\n            {/*<Tube*/}\n            {/*    args={[1,1]} // Width, Height and Depth of the box*/}\n            {/*    {...props} // All THREE.Mesh props are valid*/}\n            {/*>*/}\n            {/*    <meshPhongMaterial attach=\"material\" color=\"#f3f3f3\" wireframe />*/}\n            {/*</Tube>*/}\n            {/*<line ref={mesh} geometry={coneGeometry}>*/}\n            {/*    <lineBasicMaterial attach=\"material\" color={'#9c88ff'} linewidth={100}/>*/}\n            {/*</line>*/}\n        </>\n    )\n}\n\nexport default Selected\n","import React, {useState, useRef} from \"react\";\nimport {Canvas, extend, useFrame, useThree} from \"react-three-fiber\";\nimport _ from \"lodash\";\nimport Sphere from \"../Objects/Sphere\";\nimport ToolbarWrapper from \"./ToolbarWrapper\";\nimport {planetInfo} from '../PlanetData'\nimport starInfo from '../newStarData'\nimport {Stats, Stars} from \"drei\";\nimport {OrbitControls} from \"three/examples/jsm/controls/OrbitControls\";\nimport CameraControls from \"../HelperFunctions/CameraControls\";\nimport Star from \"../Objects/Star\";\nimport StarArrow from \"../Objects/StarArrow\";\nimport Selected from \"../Objects/Selected\";\nimport Pin from \"../Objects/Pin\";\nimport * as THREE from \"three\";\nimport Toolbar from \"./Toolbar\";\n\n\nfunction Visualization(\n    {}\n) {\n\n    const [cameraPosition, setCameraPosition] = useState({x: 0, y: 0, z: 0});\n    const [cameraMoving, setCameraMoving] = useState(false);\n    const [active, setActive] = useState(false);\n    const [cameraMovingToHome, setCameraMovingToHome] = useState(false);\n    const [selectedPosition ,setSelectedPosition] = useState({x: 0, y: 0, z:0})\n    const [selectedSize, setSelectedSize] = useState({innerRadius: planetInfo[0].size[0]*3, outerRadius: planetInfo[0].size[1]*3, thetaSegments: planetInfo[0].size[2]})\n    const [focusDescription, setFocusDescription] = useState({\n        name: 'Sun',\n        funFact: 'A very small star',\n        notable: true,\n        realPosition: 'X =-9.256536737968663 E+05, Y = 9.520686612116818 E+05, Z = 1.366316508862237 E+04',\n        temperature: '5772',\n        ra: planetInfo[0].ra,\n        dec: planetInfo[0].dec,\n        distance: planetInfo[0].distance,\n        velocityDirection: [10,230, 5],\n        vel_is_valid: \"True\",\n        velMag: 230.271,\n        realColor: 'Yellow'\n    });\n    const [toggleLines, setToggleLines] = useState(true);\n    const [distanceValues, setDistanceValues] = useState([0,500]);\n    const [velMagValues, setVelMagValues] = useState([0,9821]);\n    const [filterValues, setFilterValues] = useState({\n        distance: [0,500],\n        velMag: [0,9821],\n        velArrows: true\n    })\n    const [bookmarkList, setBookmarkList] = useState([]);\n    const [toggleVel, setToggleVel] = useState(true);\n    const [cameraAxisView, setCameraAxisView] = useState()\n\n    const handleHomeButton = () => {\n        const tmpCameraPosition = {\n            x: 0,\n            y: 0,\n            z: 0\n        };\n        const tmpSelectedPosition = {\n            x: planetInfo[0].position[0],\n            y: planetInfo[0].position[1],\n            z: planetInfo[0].position[2]\n        };\n        const tmpSelectedSize = {\n            innerRadius: planetInfo[0].size[0]*3,\n            outerRadius: planetInfo[0].size[1]*3,\n            thetaSegments: planetInfo[0].size[2]\n        };\n\n        setSelectedSize(tmpSelectedSize)\n        setSelectedPosition(tmpSelectedPosition)\n        setFocusDescription({\n            name: 'Sun',\n            funFact: 'A very small star',\n            notable: true,\n            realPosition: 'X =-9.256536737968663 E+05, Y = 9.520686612116818 E+05, Z = 1.366316508862237 E+04',\n            temperature: '5772',\n            ra: planetInfo[0].ra,\n            dec: planetInfo[0].dec,\n            distance: planetInfo[0].distance,\n            velocityDirection: [10,230, 5],\n            velMag: 230.271,\n            vel_is_valid: \"True\",\n            realColor: 'Yellow'\n        });\n        setCameraPosition(tmpCameraPosition);\n        setToggleLines(true)\n        setCameraMovingToHome(true)\n    };\nconsole.log(velMagValues)\n    const updateStarPosition = (indexNum) => {\n        const tmpCameraPosition = {\n            x: starInfo[indexNum].position[0],\n            y: starInfo[indexNum].position[1],\n            z: starInfo[indexNum].position[2]\n        };\n        const tmpSelectedPosition = {\n            x: starInfo[indexNum].position[0],\n            y: starInfo[indexNum].position[1],\n            z: starInfo[indexNum].position[2]\n        };\n        const tmpSelectedSize = {\n            innerRadius: starInfo[indexNum].size[0]*3,\n            outerRadius: starInfo[indexNum].size[1]*3,\n            thetaSegments: starInfo[indexNum].size[2]\n        };\n        setSelectedSize(tmpSelectedSize)\n\n        setSelectedPosition(tmpSelectedPosition)\n        setCameraPosition(tmpCameraPosition);\n        setCameraMoving(true)\n        setCameraMovingToHome(true)\n        setToggleLines(false)\n        setFocusDescription({\n            name: starInfo[indexNum].name,\n            funFact: starInfo[indexNum].funFact,\n            notable: starInfo[indexNum].notable,\n            ra: starInfo[indexNum].ra,\n            dec: starInfo[indexNum].dec,\n            distance: starInfo[indexNum].distance,\n            realPosition: starInfo[indexNum].realPosition,\n            temperature: starInfo[indexNum].temperature,\n            brightness: starInfo[indexNum].brightness,\n            realSize: starInfo[indexNum].realSize,\n            realColor: starInfo[indexNum].realColor,\n            vel_is_valid: starInfo[indexNum].vel_is_valid,\n            velMag: starInfo[indexNum].velMag\n\n        })\n    };\n\n    const goToBookmarkedStar = (indexNum) => {\n        const tmpCameraPosition = {\n            x: bookmarkList[indexNum].position[0],\n            y: bookmarkList[indexNum].position[1],\n            z: bookmarkList[indexNum].position[2]\n        };\n        const tmpSelectedPosition = {\n            x: bookmarkList[indexNum].position[0],\n            y: bookmarkList[indexNum].position[1],\n            z: bookmarkList[indexNum].position[2]\n        };\n        const tmpSelectedSize = {\n            innerRadius: bookmarkList[indexNum].size[0]*3,\n            outerRadius: bookmarkList[indexNum].size[1]*3,\n            thetaSegments: bookmarkList[indexNum].size[2]\n        };\n        setSelectedSize(tmpSelectedSize)\n\n        setSelectedPosition(tmpSelectedPosition)\n        setCameraPosition(tmpCameraPosition);\n        setCameraMoving(true)\n        setCameraMovingToHome(true)\n        setToggleLines(false)\n        setFocusDescription({\n            name: bookmarkList[indexNum].name,\n            funFact: bookmarkList[indexNum].funFact,\n            notable: bookmarkList[indexNum].notable,\n            ra: bookmarkList[indexNum].ra,\n            dec: bookmarkList[indexNum].dec,\n            distance: bookmarkList[indexNum].distance,\n            realPosition: bookmarkList[indexNum].realPosition,\n            temperature: bookmarkList[indexNum].temperature,\n            brightness: bookmarkList[indexNum].brightness,\n            realSize: bookmarkList[indexNum].realSize,\n            realColor: bookmarkList[indexNum].realColor,\n            vel_is_valid: bookmarkList[indexNum].vel_is_valid === \"True\" ? true : false,\n            velMag: bookmarkList[indexNum].velMag\n\n        })\n    };\n\n    const handleSetFilterValues = (event) => {\n        let tmp = {\n            distance: [distanceValues[0], distanceValues[1]],\n            velMag: [velMagValues[0],velMagValues[1]],\n            velArrows: toggleVel\n        }\n        setFilterValues(tmp)\n    };\n\n    const handleSetVelMagValues = (event, value) => {\n        setVelMagValues(value)\n\n    }\n\n    const handleSetDistanceValues = (event, value) => {\n        setDistanceValues(value)\n    };\n\n    const handleToggleLines = () => {\n        setToggleLines(prevState => !prevState);\n    };\n\n    const handleToggleVel = () => {\n        setToggleVel(prevState => !prevState);\n    }\n\n    const handleBookmark = (indexNum) => {\n        setBookmarkList(prevState => [...prevState, starInfo[indexNum]])\n    };\n\n    return (\n        <>\n            <div className='mainVisualization'>\n                <Canvas\n                    camera={{far: 10000000000, position: [0, 0, 7], fov: 50}}\n                >\n                    <ambientLight/>\n                    <pointLight position={[10, 10, 10]}/>\n                            <Sphere\n                                color={planetInfo[0].color}\n                                size={planetInfo[0].size}\n                                name={planetInfo[0].name}\n                                indexNum={0}\n                                position={planetInfo[0].position}\n                                cameraPosition={cameraPosition}\n                                cameraMoving={cameraMoving}\n                                setCameraMoving={setCameraMoving}\n                                setActive={setActive}\n                                active={active}\n                                ra={planetInfo[0].ra}\n                                dec={planetInfo[0].dec}\n                                velocityDirection={planetInfo[0].velocityDirection}\n                                velMag={planetInfo[0].velMag}\n                                temperature={planetInfo[0].temperature}\n                                distance={planetInfo[0].distance}\n                                starInfo={starInfo}\n                                focusDescription={focusDescription}\n                            />\n\n                    <Selected\n                        position={[selectedPosition.x, selectedPosition.y, selectedPosition.z]}\n                        size={[selectedSize.innerRadius, selectedSize.outerRadius, 10000]}\n                    />\n\n                    {\n                        _.times(starInfo.length, (i) => (\n                            <>\n\n                                {\n                                    starInfo[i].distance >= filterValues.distance[0] && starInfo[i].distance <= filterValues.distance[1] && starInfo[i].velMag >= filterValues.velMag[0] && starInfo[i].velMag <= filterValues.velMag[1] ?\n                                        <Star\n                                            color={starInfo[i].color}\n                                            size={[.1,.1,.1]}\n                                            indexNum={i}\n                                            position={starInfo[i].position}\n                                            updateStarPosition={updateStarPosition}\n                                            cameraPosition={cameraPosition}\n                                            cameraMoving={cameraMoving}\n                                            temperature={starInfo[i].temperature}\n                                            setCameraMoving={setCameraMoving}\n                                            velocityDirection={starInfo[i].velocityDirection}\n                                            vel_is_valid={starInfo[i].vel_is_valid}\n                                            velMag={starInfo[i].velMag}\n                                            setActive={setActive}\n                                            starInfo={starInfo[i]}\n                                            active={active}\n                                            focusDescription={focusDescription}\n                                            filterValues={filterValues}\n                                            handleBookmark={handleBookmark}\n                                        />\n                                        :\n                                        null\n                                }\n\n\n                            </>\n                        ))\n                    }\n                    {/*{*/}\n                    {/*    toggleLines ?*/}\n                    {/*    _.times(starInfo.length, (i)=>(*/}\n                    {/*        <>*/}\n                    {/*            <Pin*/}\n                    {/*                updateStarPosition={updateStarPosition}*/}\n                    {/*                setActive={setActive}*/}\n                    {/*                active={active}*/}\n                    {/*                indexNum={i}*/}\n                    {/*                position={[(1-.01)*selectedPosition.x+.01*starInfo[i].position[0],(1-.01)*selectedPosition.y+.01*starInfo[i].position[1],(1-.01)*selectedPosition.z+.01*starInfo[i].position[2]]}*/}\n                    {/*                fromPosition={[new THREE.Vector3(starInfo[i].position[0],starInfo[i].position[1],starInfo[i].position[2]),new THREE.Vector3(selectedPosition.x,selectedPosition.y,selectedPosition.z)]}*/}\n                    {/*            />*/}\n                    {/*        </>*/}\n                    {/*    ))*/}\n                    {/*        :*/}\n                    {/*        null*/}\n                    {/*}*/}\n                    {\n                        cameraMoving ?\n                            null\n                            :\n                            <CameraControls\n                                cameraPosition={cameraPosition}\n                                cameraMoving={cameraMoving}\n                                setCameraMoving={setCameraMoving}\n                                cameraMovingToHome={cameraMovingToHome}\n                                setCameraMovingToHome={setCameraMovingToHome}\n                            />\n                    }\n                    <Stats\n                        className='stats'\n                    />\n                </Canvas>\n                <ToolbarWrapper\n                    handleHomeButton={handleHomeButton}\n                    focusDescription={focusDescription}\n                    updateStarPosition={updateStarPosition}\n                    handleToggleLines={handleToggleLines}\n                    cameraPosition={cameraPosition}\n                    distanceValues={distanceValues}\n                    handleSetDistanceValues={handleSetDistanceValues}\n                    bookmarkList={bookmarkList}\n                    goToBookmarkedStar={goToBookmarkedStar}\n                    handleSetFilterValues={handleSetFilterValues}\n                    filterValues={filterValues}\n                    handleSetVelMagValues={handleSetVelMagValues}\n                    velMagValues={velMagValues}\n                    toggleVel={toggleVel}\n                    handleToggleVel={handleToggleVel}\n                    cameraMoving={cameraMoving}\n                    setCameraMoving={setCameraMoving}\n                    cameraMovingToHome={cameraMovingToHome}\n                    setCameraMovingToHome={setCameraMovingToHome}\n                />\n            </div>\n        </>\n    )\n}\n\n\nexport default Visualization\n","import React from \"react\";\nimport Visualization from \"../Components/Visualization\";\nimport '../style.css'\n\nfunction Main(){\n\n    return (\n        <>\n            <Visualization/>\n        </>\n    )\n}\n\nexport default Main\n","import React from 'react';\nimport Main from \"./Pages/Main\";\nimport 'semantic-ui-css/semantic.min.css'\nimport CSVReader from \"./CSVReader\";\n\nfunction App() {\n  return (\n    <>\n        <Main/>\n        {/*<CSVReader/>*/}\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}